{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Home battery prediction and automatic charging for Home Assistant with GivTCP Also known by some as Batpred or Batman! Copyright (c) Trefor Southwell October 2023 - All rights reserved This software maybe used at not cost for personal use only No warranty is given, either expressed or implied For support please raise a Github ticket or use the GivTCP Facebook page: https://www.facebook.com/groups/615579009972782 For support specific to the Solis inverter you can use the Solis Facebook Group: . If you want to buy me a beer then please use Paypal - tdlj@tdlj.net","title":"Introduction"},{"location":"#introduction","text":"Home battery prediction and automatic charging for Home Assistant with GivTCP Also known by some as Batpred or Batman! Copyright (c) Trefor Southwell October 2023 - All rights reserved This software maybe used at not cost for personal use only No warranty is given, either expressed or implied For support please raise a Github ticket or use the GivTCP Facebook page: https://www.facebook.com/groups/615579009972782 For support specific to the Solis inverter you can use the Solis Facebook Group: . If you want to buy me a beer then please use Paypal - tdlj@tdlj.net","title":"Introduction"},{"location":"car-charge-planning/","text":"Car charging planning There are two ways to plan car charging slots: If you have Intelligent Octopus import tariff and the Octopus Energy Plugin - in which case Predbat will use the slots allocated by the plugin in battery prediction Ensure octopus_intelligent_slot in apps.yaml points to the Intelligent Slot sensor in the Octopus Energy Plugin Set switch.predbat_octopus_intelligent_charging to True Information about the car's battery size will also be extracted from the plugin You will need to set the cars current soc sensor, car_charging_soc correctly to have accurate results If you set car_charging_limit then Batpred can also know if the car's limit is set lower than in Intelligent Octopus Let the Octopus app control when your car charges Predbat led charging - Here Predbat plans the charging based on the upcoming low rate slots Ensure car_charging_limit , car_charging_soc and car_charging_planned are set correctly in apps.yaml Set select.predbat_car_charging_plan_time in the config or in HA to the time you want the car ready by Enable switch.predbat_car_charging_plan_smart if you want to use the cheapest slots only. If you leave this disabled then all low rate slots will be used. This may mean you need to use expert mode and change your low rate threshold to configure which slots should be considered if you have a tariff with more than 2 import rates (e.g. flux) Use an automation based on binary_sensor.predbat_car_charging_slot to control when your car charges NOTE: Multiple cars can be planned with Predbat. See Car charging filtering and Planned car charging in the config.yml settings section of the documentation.","title":"Car charging planning"},{"location":"car-charge-planning/#car-charging-planning","text":"There are two ways to plan car charging slots: If you have Intelligent Octopus import tariff and the Octopus Energy Plugin - in which case Predbat will use the slots allocated by the plugin in battery prediction Ensure octopus_intelligent_slot in apps.yaml points to the Intelligent Slot sensor in the Octopus Energy Plugin Set switch.predbat_octopus_intelligent_charging to True Information about the car's battery size will also be extracted from the plugin You will need to set the cars current soc sensor, car_charging_soc correctly to have accurate results If you set car_charging_limit then Batpred can also know if the car's limit is set lower than in Intelligent Octopus Let the Octopus app control when your car charges Predbat led charging - Here Predbat plans the charging based on the upcoming low rate slots Ensure car_charging_limit , car_charging_soc and car_charging_planned are set correctly in apps.yaml Set select.predbat_car_charging_plan_time in the config or in HA to the time you want the car ready by Enable switch.predbat_car_charging_plan_smart if you want to use the cheapest slots only. If you leave this disabled then all low rate slots will be used. This may mean you need to use expert mode and change your low rate threshold to configure which slots should be considered if you have a tariff with more than 2 import rates (e.g. flux) Use an automation based on binary_sensor.predbat_car_charging_slot to control when your car charges NOTE: Multiple cars can be planned with Predbat. See Car charging filtering and Planned car charging in the config.yml settings section of the documentation.","title":"Car charging planning"},{"location":"config-yml-settings/","text":"apps.yaml settings Templates You can find template configurations in the following locations: Template Link GivEnergy apps.yaml SolisX apps.yaml SolarEdge apps.yaml The GivEnergy template will be installed by default but if you are using another inverter please copy the correct template and modify from there. Basics Basic configuration items timezone - Set to your local timezone, default is Europe/London ( https://gist.github.com/heyalexej/8bf688fd67d7199be4a1682b3eec7568 ) notify_devices - A list of device names to notify, the default is just 'notify' which contacts all mobile devices user_config_enable - When True the user configuration is exposed in Home Assistant as input_number and switch, the config file becomes just the defaults to use days_previous - A list of the the number of days to go back in the history to predict your load, recommended settings are 1, 7 or both 7 and 14 (if you have enough data). Each list entry is weighted with days_previous_weight . Keep in mind HA default history is only 10 days. days_previous_weight A list of the weightings to use of the data for each of the days in days_previous. forecast_hours - the number of hours to forecast ahead, 48 is the suggested amount. input_number.forecast_plan_hours - the number of hours after the next charge slot to include in the plan, default 24 hours is the suggested amount (to match energy rate cycles) Inverter information The following are entity names in HA for GivTCP, assuming you only have one inverter and the entity names are standard then it will be auto discovered. For other brands of inverter see Other Inverters num_inverters - If you increase this above 1 you must provide multiple of each of these entities geserial - This is a helper regular expression to find your serial number, if it doesn't work edit it manually or change individual entities to match. Historical data Data from GivTCP It's recommended you get this data from GivTCP, there are also controls for load_scaling and import_export_scaling if they need scale adjustments load_today - GivTCP Entity name for the house load in kWh today (must be incrementing) import_today - GivTCP Imported energy today in kWh (incrementing) export_today - GivTCP Exported energy today in kWh (incrementing) pv_today - GivTCP PV energy today in kWh (incrementing) If you have multiple inverters then you may find that the load_today figures from GivTCP are incorrect as the inverters share the house load between them. In this circumstance one solution is to create a template helper to calculate house load from {pv generation}+{battery discharge}-{battery charge}+{import}-{export}. e.g. {{ states('sensor.givtcp_XXX_pv_energy_today_kwh')|float(0) + <inverter 2>... + states('sensor.givtcp_XXX_battery_discharge_energy_today_kwh')|float(0) + <inverter 2>... - states('sensor.givtcp_XXX_battery_discharge_energy_today_kwh')|float(0) - <inverter 2>... + states('sensor.givtcp_XXX_import_energy_today_kwh')|float(0) - states('sensor.givtcp_XXX_export_energy_today_kwh')|float(0) }} GivEnergy Cloud Data If you have an issue with the GivTCP data you can get this historical data from the GivEnergy cloud instead. This data is updated every 30 minutes ge_cloud_data - When True use the GE Cloud for data rather than load_today, import_today and export_today ge_cloud_serial - Set the inverter serial number to use for the Cloud data ge_cloud_key - Set to your API Key for GE Cloud (long string) Load filtering By default if Predbat sees a gap in the historical load data it will fill it with average data. This is to help in the cases of small amounts of lost data. For entire lost days you should change days_previous to point to different days(s) or include 3 or more days and the modal filter will discard the lowest one. load_filter_threshold - Sets the number of minutes of zero load data to be considered a gap, the default is 30. Inverter control inverter_limit - One per inverter, when set defines the maximum watts of AC power for your inverter (e.g. 3600). This will help to emulate clipping when your solar produces more than the inverter can handle, but it won't be that accurate as the source of the data isn't minute by minute. If you have a separate Solar inverter as well then add the solar inverter limit to the battery inverter limit to give one total amount. export_limit - One per inverter (optional), when set defines the maximum watts of AC power your inverter can export to the grid at (e.g. 2500). This will emulate the software export limit setting in the Inverter that you will have if your G98/G99 approval was lower than your maximum inverter power (check your install information for details). If not set the export limit is the same as the inverter limit. inverter_limit_charge and inverter_limit_discharge - One per inverter (optional), when set overrides the maximum charge/discharge rate register settings used when controlling the inverter. This can be used for workarounds if you need to cap your inverter battery rate as Predbat overwrites the maximum rate registers when it enables a timed charge or discharge. inverter_battery_rate_min - One per inverter (optional), set in watts, when set models a \"bug\" in the inverter firmware in some models where if charge or discharge rates are set to 0 you actually get a small amount of charge or discharge. Recommended setting is 200 for gen1 hybrids with this issue. set_discharge_during_charge - If turned off disables inverter discharge during charge slots, useful for multi-inverter to avoid cross charging when batteries are out of balance. inverter_reserve_max - Global, sets the maximum reserve % that maybe set to the inverter, the default is 100. Can be set to 99 to workaround some gen2 inverters which refuse to be set to 100. REST Interface inverter control givtcp_rest - One per Inverter, sets the REST API URL ( http://homeassistant.local:6345 is the normal one for the first inverter). When enabled the Control per inverter below isn't used and instead communication is directly via REST and thus bypasses some issues with MQTT. If using Docker then change homeassistant.local to the Docker IP address. To check your REST is working open up the readData API point in a Web browser e.g: http://homeassistant.local:6345/readData If you get a bunch of inverter information back then it's working! It's recommended you enable Raw register output in GivTCP for added monitoring: Home-assistant Inverter control Control per inverter (only used if REST isn't set): soc_kw - GivTCP Entity name of the battery SOC in kWh, should be the inverter one not an individual battery soc_max - GivTCP Entity name for the maximum charge level for the battery reserve - GivTCP sensor name for the reserve setting in % inverter_mode - GivTCP inverter mode control inverter_time - GivTCP inverter timestamp charge_enable - GivTCP charge enable entity - says if the battery will be charged in the time window charge_limit - GivTCP Entity name for used to set the SOC target for the battery in percentage charge_start_time - GivTCP battery charge start time entity charge_end_time - GivTCP battery charge end time entity charge_rate - GivTCP battery charge rate entity in watts discharge_rate - GivTCP battery discharge max rate entity in watts battery_power - GivTCP current battery power in watts scheduled_charge_enable - GivTCP Scheduled charge enable config scheduled_discharge_enable - GivTCP Scheduled discharge enable config discharge_start_time - GivTCP scheduled discharge slot_1 start time discharge_end_time - GivTCP scheduled discharge slot_1 end time Solcast The following are entity names in Solcast, unlikely to need changing although a few people have reported their entity names don't contain 'solcast' so worth checking: pv_forecast_today - Entity name for solcast today's forecast pv_forecast_tomorrow - Entity name for solcast forecast for tomorrow pv_forecast_d3 - Entity name for solcast forecast for day 3 pv_forecast_d4 - Entity name for solcast forecast for day 4 (also d5, d6 & d7 are supported but not that useful) Octopus Energy The following are entity names in the Octopus Energy plugin. They are set to a regular expression and auto-discovered but you can comment out to disable or set them manually. metric_octopus_import - Import rates from the Octopus plugin, should point to the sensor metric_octopus_export - Export rates from the Octopus plugin, should point to the sensor CAUTION To get detailed energy rates needed by Predbat you need to go into Home Assistant and manually enable the following events which are disabled by the plugin by default in some versions: event.octopus_energy_electricity_xxxxxxxx_previous_day_rates event.octopus_energy_electricity_xxxxxxxx_current_day_rates event.octopus_energy_electricity_xxxxxxxx_next_day_rates event.octopus_energy_electricity_xxxxxxxx_export_previous_day_rates event.octopus_energy_electricity_xxxxxxxx_export_current_day_rates event.octopus_energy_electricity_xxxxxxxx_export_next_day_rates octopus_intelligent_slot - If you have Octopus Intelligent GO and the Octopus Energy plugin installed point to the 'slot' sensor. This is used to find Intelligent Go slots and thus predict when your car will charge and report the additional low rate slots outside the normal low rate hours octopus_saving_session - Points to the sensor in the Octopus Energy plugin that publishes saving sessions (binary_sensor.octopus_energy_XXXXX_saving_sessions). This is used to automatically join saving sessions and to determine the rate of the saving session. It's assumed the saving amount will be added to your import and export rates. This calculation assumes you normally consume zero during a saving session as you are a home battery user. octopus_saving_session_octopoints_per_penny - Sets the Octopoints per pence (currently 8) switch.predbat_octopus_intelligent_charging - When enabled Predbat will plan charging around the Intelligent Octopus slots, taking it into account for battery load and generating the slot information input_number.predbat_metric_octopus_saving_rate - Set the assuming saving rate for an Octopus saving session (in pence) Or you can override these by manually supplying an octopus pricing URL (expert feature) rates_import_octopus_url rates_export_octopus_url Standing charge Predbat also includes the daily standing charge in cost predictions (optional) metric_standing_charge - Set to the standing charge in pounds e.g. 0.50 is 50p. Can be typed in directly or point to a sensor that stores this information (e.g. Octopus Plugin). Delete this line from apps.yaml or set it to zero if you don't want the standing charge (and only have consumption usage) to be included in Predbat charts and output data. Manual energy rates Or manually set your rates in a 24-hour period using these: rates_import: - start: \"HH:MM:SS\" end: \"HH:MM:SS\" rate: pence rates_export: - start: \"HH:MM:SS\" end: \"HH:MM:SS\" rate: pence start and end are in the time format of \"HH:MM:SS\" e.g. \"12:30:00\" and should be aligned to 30 minute slots normally. rate is in pence e.g. 4.2 Manually Over-riding energy rates You can also override the energy rates (regardless of if they are set manually or via Octopus) using the override feature. The override is used to set times where rates are different, e.g. an Octopus Power Up session (zero rate for an hour or two) rates_import_override: - start : \"HH:MM:SS\" end : \"HH:MM:SS\" rate : pence date : \"YYYY-MM-DD\" rates_export_override: - start : \"HH:MM:SS\" end : \"HH:MM:SS\" rate : pence date : \"YYYY-MM-DD\" date is in the date format of \"YYYY-MM-DD\" e.g. \"2023-09-09\" Car charging filtering You might want to remove your electric car charging data from the historical load so as to not bias the calculations, otherwise you will get high charge levels when the car was charged previously (e.g. last week). car_charging_hold - When true car charging data is removed from the simulation (by subtracting car_charging_rate), as you either charge from the grid or you use the Octopus Energy plugin to predict when it will charge correctly (default 6kw, configure with car_charging_threshold ) car_charging_threshold - Sets the threshold above which is assumed to be car charging and ignore (default 6 = 6kw) car_charging_energy - Set to a HA entity which is incrementing kWh data for the car charger, will be used instead of threshold for more accurate car charging data to filter out Planned car charging These features allow Predbat to know when you plan to charge your car. If you have Intelligent Octopus setup then you won't need to change these as it's done automatically via their app and the Octopus Energy plugin. octopus_intelligent_charging - When enabled Predbat will plan charging around the Intelligent Octopus slots, taking it into account for battery load and generating the slot information Only needed if you don't use Intelligent Octopus: car_charging_planned - Can be set to a sensor which lets Predbat know the car is plugged in and planned to charge during low rate slots, or False to disable, or True to always enable car_charging_planned_response - An array of values from the planned sensor which indicate that the car is plugged in and will charge in the next low rate slot car_charging_rate - Set to the car's charging rate (normally 7.5 for 7.5kw). car_charging_battery_size - Indicates the car's battery size in kWh, defaults to 100. It will be used to predict car charging stops. car_charging_now - When set links to a sensor that tells you that the car is currently charging. Predbat will then assume this 30 minute slot is used for charging regardless of the plan. If Octopus Intelligent Charging is enabled then it will also assume it's a low rate slot for the car/house, otherwise rates are taken from the normal rate data. car_charging_now_response - Sets the range of positive responses for car_charging_now , useful if you have a sensor for your car that isn't binary. car_charging_plan_time - When using Predbat-led planning set this to the time you want the car to be charged by car_charging_plan_smart - When true the cheapest slots can be used for charging, when False it will be the next low rate slot Connect to your cars sensors for accurate data: car_charging_limit - The % limit the car is set to charge to, link to a suitable sensor. Default is 100% car_charging_soc - The cars current % charge level, link to a suitable sensor. Default is 0% Control how your battery behaves during car charging: car_charging_from_battery - When True the car can drain the home battery, Predbat will manage the correct level of battery accordingly. When False home battery discharge will be prevented when your car charges, all load from the car and home will be from the grid. This is achieved by setting the discharge rate to 0 during car charging and to the maximum otherwise, hence if you turn this switch Off you won't be able to change your discharge rate outside Predbat. The home battery can still charge from the grid/solar in either case. Only use this if Predbat knows your car charging plan, e.g. you are using Intelligent Octopus or you use the car slots in Predbat to control your car charging. CAUTION: If you turn this switch back on during a car charging session you will need to set your battery discharge rate back to maximum manually. Multiple cars can be planned with Predbat, in which case you should set num_cars in apps.yaml to the number of cars you want to plan car_charging_limit , car_charging_planned , car_charging_battery_size and car_charging_soc must then be a list of values (e.g. 2 entries for 2 cars) If you have Intelligent Octopus then Car 0 will be managed by Octopus Energy plugin if enabled Each car will have it's own slot sensor created predbat_car_charging_slot_1 for car 1 Each car will have it's own SOC planning sensor created e.g predbat.car_soc_1 and predbat.car_soc_best_1 for car 1 Workarounds switch.predbat_set_read_only - When set prevents Predbat from making modifications to the inverter settings (regardless of the configuration). Predbat will continue making and updating its prediction plan every 5 minutes, but no inverter changes will be made. This is useful if you want to over-ride what predbat is planning to do, or whilst you are learning how Predbat works prior to turning it on 'in anger'. battery_scaling - Scales the battery reported SOC kWh e.g. if you set 0.8 your battery is only 80% of reported capacity. If you are going to chart this you may want to use predbat.soc_kw_h0 as your current status rather than the GivTCP entity so everything lines up import_export_scaling - Scaling the import & export data from GivTCP - used for workarounds inverter_clock_skew_start , inverter_clock_skew_end - Skews the setting of the charge slot registers vs the predicted start time (see apps.yml) inverter_clock_skew_discharge_start , inverter_clock_skew_discharge_end - Skews the setting of the discharge slot registers vs the predicted start time (see apps.yml) clock_skew - Skews the local time that Predbat uses (from AppDaemon), will change when real-time actions happen e.g. triggering a discharge. predbat_battery_capacity_nominal - When enabled Predbat uses the reported battery size from the Nominal field rather than from the normal GivTCP reported size. If your battery size is reported wrongly maybe try turning this on and see if it helps. inverter_battery_rate_min - Can be set to model the inverter not actually totally stopping discharging or charging the battery (value in watts). inverter_reserve_max - Global, sets the maximum reserve % that maybe set to the inverter, the default is 100. Can be set to 99 to workaround some gen2 inverters which refuse to be set to 100. car_charging_now - Can be used to workaround Ohme issue with Intelligent where the plan is not published, see Planned car charging Balance Inverters When you have two or more inverters it's possible they get out of sync so they are at different charge levels or they start to cross-charge (one discharges into another). When enabled, balance inverters tries to recover this situation by disabling either charging or discharging from one of the batteries until they re-align. The apps.yaml contains a setting balance_inverters_seconds which defines how often to run the balancing, 30 seconds is recommended if your machine is fast enough, but the default is 60 seconds. Enable the switch.predbat_balance_inverters_enable switch in Home Assistant to enable this feature. switch.predbat_balance_inverters_charge - Is used to toggle on/off balancing while the batteries are charging switch.predbat_balance_inverters_discharge - Is used to toggle on/off balancing while the batteries are discharging switch.predbat_balance_inverters_crosscharge - Is used to toggle on/off balancing when the batteries are cross charging input_number.predbat_balance_inverters_threshold_charge - Sets the minimum percentage divergence of SOC during charge before balancing, default is 1% input_number.predbat_balance_inverters_threshold_discharge - Sets the minimum percentage divergence of SOC during discharge before balancing, default is 1% Triggers The trigger feature is useful to help trigger your own automation based on Predbat determining that you have spare solar energy or battery that you would otherwise export The triggers count export energy until the next active charge slot only. For each trigger give a name, the minutes of export needed and the energy required in that time Multiple triggers can be set at once so in total you could use too much energy if all run Each trigger create an entity called 'binary_sensor.predbat_export_trigger_ name ' which will be turned on when the condition is valid connect this to your automation to start whatever you want to trigger. Set the name for each trigger, the number of minutes of solar export you need, and the amount of energy in kwH you will need available during that time period in apps.yaml: For example: export_triggers: - name: \"large\" minutes: 60 energy: 1.0 - name: \"small\" minutes: 15 energy: 0.25 If you wish to trigger based on charging or discharging the battery rather than spare solar energy you can instead use the following binary sensors binary_sensor.predbat_charging - Will be True when the home battery is inside a charge slot (either being charged or being held at a level). Note that this does include charge freeze slots where the discharge rate is set to zero without charging the battery. binary_sensor.predbat_discharging - Will be True when the home battery is inside a force discharge slot. This does not include discharge freeze slots where the charge rate is set to zero to export excess solar only. Holiday mode When you go away you are likely to use less electricity and so the previous load data will be quite pessimistic. Using the configuration item input_number.predbat_holiday_days_left in Home assistant you can set the number of full days that you will be away for (including today). The number will count down by 1 day at midnight until it gets back to zero. When holiday days left are non-zero, the holiday mode is active. When holiday mode is active the historical load data will be taken from yesterday's data (1 day ago) rather than from the days_previous setting in apps.yaml. This means Predbat will adjust more quickly to the new usage pattern. If you have been away for a longer period of time (more than your normal days_previous setting) then obviously it's going to take longer for the historical data to catch up, you could then enable holiday mode for another 7 days after your return. In summary: For short holidays set holiday_days_left to the number of full days you are away, including today but excluding the return day For longer holidays set holiday_days_left to the number of days you are away plus another 7 days until the data catches back up","title":"apps.yaml settings"},{"location":"config-yml-settings/#appsyaml-settings","text":"","title":"apps.yaml settings"},{"location":"config-yml-settings/#templates","text":"You can find template configurations in the following locations: Template Link GivEnergy apps.yaml SolisX apps.yaml SolarEdge apps.yaml The GivEnergy template will be installed by default but if you are using another inverter please copy the correct template and modify from there.","title":"Templates"},{"location":"config-yml-settings/#basics","text":"Basic configuration items timezone - Set to your local timezone, default is Europe/London ( https://gist.github.com/heyalexej/8bf688fd67d7199be4a1682b3eec7568 ) notify_devices - A list of device names to notify, the default is just 'notify' which contacts all mobile devices user_config_enable - When True the user configuration is exposed in Home Assistant as input_number and switch, the config file becomes just the defaults to use days_previous - A list of the the number of days to go back in the history to predict your load, recommended settings are 1, 7 or both 7 and 14 (if you have enough data). Each list entry is weighted with days_previous_weight . Keep in mind HA default history is only 10 days. days_previous_weight A list of the weightings to use of the data for each of the days in days_previous. forecast_hours - the number of hours to forecast ahead, 48 is the suggested amount. input_number.forecast_plan_hours - the number of hours after the next charge slot to include in the plan, default 24 hours is the suggested amount (to match energy rate cycles)","title":"Basics"},{"location":"config-yml-settings/#inverter-information","text":"The following are entity names in HA for GivTCP, assuming you only have one inverter and the entity names are standard then it will be auto discovered. For other brands of inverter see Other Inverters num_inverters - If you increase this above 1 you must provide multiple of each of these entities geserial - This is a helper regular expression to find your serial number, if it doesn't work edit it manually or change individual entities to match.","title":"Inverter information"},{"location":"config-yml-settings/#historical-data","text":"","title":"Historical data"},{"location":"config-yml-settings/#data-from-givtcp","text":"It's recommended you get this data from GivTCP, there are also controls for load_scaling and import_export_scaling if they need scale adjustments load_today - GivTCP Entity name for the house load in kWh today (must be incrementing) import_today - GivTCP Imported energy today in kWh (incrementing) export_today - GivTCP Exported energy today in kWh (incrementing) pv_today - GivTCP PV energy today in kWh (incrementing) If you have multiple inverters then you may find that the load_today figures from GivTCP are incorrect as the inverters share the house load between them. In this circumstance one solution is to create a template helper to calculate house load from {pv generation}+{battery discharge}-{battery charge}+{import}-{export}. e.g. {{ states('sensor.givtcp_XXX_pv_energy_today_kwh')|float(0) + <inverter 2>... + states('sensor.givtcp_XXX_battery_discharge_energy_today_kwh')|float(0) + <inverter 2>... - states('sensor.givtcp_XXX_battery_discharge_energy_today_kwh')|float(0) - <inverter 2>... + states('sensor.givtcp_XXX_import_energy_today_kwh')|float(0) - states('sensor.givtcp_XXX_export_energy_today_kwh')|float(0) }}","title":"Data from GivTCP"},{"location":"config-yml-settings/#givenergy-cloud-data","text":"If you have an issue with the GivTCP data you can get this historical data from the GivEnergy cloud instead. This data is updated every 30 minutes ge_cloud_data - When True use the GE Cloud for data rather than load_today, import_today and export_today ge_cloud_serial - Set the inverter serial number to use for the Cloud data ge_cloud_key - Set to your API Key for GE Cloud (long string)","title":"GivEnergy Cloud Data"},{"location":"config-yml-settings/#load-filtering","text":"By default if Predbat sees a gap in the historical load data it will fill it with average data. This is to help in the cases of small amounts of lost data. For entire lost days you should change days_previous to point to different days(s) or include 3 or more days and the modal filter will discard the lowest one. load_filter_threshold - Sets the number of minutes of zero load data to be considered a gap, the default is 30.","title":"Load filtering"},{"location":"config-yml-settings/#inverter-control","text":"inverter_limit - One per inverter, when set defines the maximum watts of AC power for your inverter (e.g. 3600). This will help to emulate clipping when your solar produces more than the inverter can handle, but it won't be that accurate as the source of the data isn't minute by minute. If you have a separate Solar inverter as well then add the solar inverter limit to the battery inverter limit to give one total amount. export_limit - One per inverter (optional), when set defines the maximum watts of AC power your inverter can export to the grid at (e.g. 2500). This will emulate the software export limit setting in the Inverter that you will have if your G98/G99 approval was lower than your maximum inverter power (check your install information for details). If not set the export limit is the same as the inverter limit. inverter_limit_charge and inverter_limit_discharge - One per inverter (optional), when set overrides the maximum charge/discharge rate register settings used when controlling the inverter. This can be used for workarounds if you need to cap your inverter battery rate as Predbat overwrites the maximum rate registers when it enables a timed charge or discharge. inverter_battery_rate_min - One per inverter (optional), set in watts, when set models a \"bug\" in the inverter firmware in some models where if charge or discharge rates are set to 0 you actually get a small amount of charge or discharge. Recommended setting is 200 for gen1 hybrids with this issue. set_discharge_during_charge - If turned off disables inverter discharge during charge slots, useful for multi-inverter to avoid cross charging when batteries are out of balance. inverter_reserve_max - Global, sets the maximum reserve % that maybe set to the inverter, the default is 100. Can be set to 99 to workaround some gen2 inverters which refuse to be set to 100.","title":"Inverter control"},{"location":"config-yml-settings/#rest-interface-inverter-control","text":"givtcp_rest - One per Inverter, sets the REST API URL ( http://homeassistant.local:6345 is the normal one for the first inverter). When enabled the Control per inverter below isn't used and instead communication is directly via REST and thus bypasses some issues with MQTT. If using Docker then change homeassistant.local to the Docker IP address. To check your REST is working open up the readData API point in a Web browser e.g: http://homeassistant.local:6345/readData If you get a bunch of inverter information back then it's working! It's recommended you enable Raw register output in GivTCP for added monitoring:","title":"REST Interface inverter control"},{"location":"config-yml-settings/#home-assistant-inverter-control","text":"Control per inverter (only used if REST isn't set): soc_kw - GivTCP Entity name of the battery SOC in kWh, should be the inverter one not an individual battery soc_max - GivTCP Entity name for the maximum charge level for the battery reserve - GivTCP sensor name for the reserve setting in % inverter_mode - GivTCP inverter mode control inverter_time - GivTCP inverter timestamp charge_enable - GivTCP charge enable entity - says if the battery will be charged in the time window charge_limit - GivTCP Entity name for used to set the SOC target for the battery in percentage charge_start_time - GivTCP battery charge start time entity charge_end_time - GivTCP battery charge end time entity charge_rate - GivTCP battery charge rate entity in watts discharge_rate - GivTCP battery discharge max rate entity in watts battery_power - GivTCP current battery power in watts scheduled_charge_enable - GivTCP Scheduled charge enable config scheduled_discharge_enable - GivTCP Scheduled discharge enable config discharge_start_time - GivTCP scheduled discharge slot_1 start time discharge_end_time - GivTCP scheduled discharge slot_1 end time","title":"Home-assistant Inverter control"},{"location":"config-yml-settings/#solcast","text":"The following are entity names in Solcast, unlikely to need changing although a few people have reported their entity names don't contain 'solcast' so worth checking: pv_forecast_today - Entity name for solcast today's forecast pv_forecast_tomorrow - Entity name for solcast forecast for tomorrow pv_forecast_d3 - Entity name for solcast forecast for day 3 pv_forecast_d4 - Entity name for solcast forecast for day 4 (also d5, d6 & d7 are supported but not that useful)","title":"Solcast"},{"location":"config-yml-settings/#octopus-energy","text":"The following are entity names in the Octopus Energy plugin. They are set to a regular expression and auto-discovered but you can comment out to disable or set them manually. metric_octopus_import - Import rates from the Octopus plugin, should point to the sensor metric_octopus_export - Export rates from the Octopus plugin, should point to the sensor CAUTION To get detailed energy rates needed by Predbat you need to go into Home Assistant and manually enable the following events which are disabled by the plugin by default in some versions: event.octopus_energy_electricity_xxxxxxxx_previous_day_rates event.octopus_energy_electricity_xxxxxxxx_current_day_rates event.octopus_energy_electricity_xxxxxxxx_next_day_rates event.octopus_energy_electricity_xxxxxxxx_export_previous_day_rates event.octopus_energy_electricity_xxxxxxxx_export_current_day_rates event.octopus_energy_electricity_xxxxxxxx_export_next_day_rates octopus_intelligent_slot - If you have Octopus Intelligent GO and the Octopus Energy plugin installed point to the 'slot' sensor. This is used to find Intelligent Go slots and thus predict when your car will charge and report the additional low rate slots outside the normal low rate hours octopus_saving_session - Points to the sensor in the Octopus Energy plugin that publishes saving sessions (binary_sensor.octopus_energy_XXXXX_saving_sessions). This is used to automatically join saving sessions and to determine the rate of the saving session. It's assumed the saving amount will be added to your import and export rates. This calculation assumes you normally consume zero during a saving session as you are a home battery user. octopus_saving_session_octopoints_per_penny - Sets the Octopoints per pence (currently 8) switch.predbat_octopus_intelligent_charging - When enabled Predbat will plan charging around the Intelligent Octopus slots, taking it into account for battery load and generating the slot information input_number.predbat_metric_octopus_saving_rate - Set the assuming saving rate for an Octopus saving session (in pence) Or you can override these by manually supplying an octopus pricing URL (expert feature) rates_import_octopus_url rates_export_octopus_url","title":"Octopus Energy"},{"location":"config-yml-settings/#standing-charge","text":"Predbat also includes the daily standing charge in cost predictions (optional) metric_standing_charge - Set to the standing charge in pounds e.g. 0.50 is 50p. Can be typed in directly or point to a sensor that stores this information (e.g. Octopus Plugin). Delete this line from apps.yaml or set it to zero if you don't want the standing charge (and only have consumption usage) to be included in Predbat charts and output data.","title":"Standing charge"},{"location":"config-yml-settings/#manual-energy-rates","text":"Or manually set your rates in a 24-hour period using these: rates_import: - start: \"HH:MM:SS\" end: \"HH:MM:SS\" rate: pence rates_export: - start: \"HH:MM:SS\" end: \"HH:MM:SS\" rate: pence start and end are in the time format of \"HH:MM:SS\" e.g. \"12:30:00\" and should be aligned to 30 minute slots normally. rate is in pence e.g. 4.2","title":"Manual energy rates"},{"location":"config-yml-settings/#manually-over-riding-energy-rates","text":"You can also override the energy rates (regardless of if they are set manually or via Octopus) using the override feature. The override is used to set times where rates are different, e.g. an Octopus Power Up session (zero rate for an hour or two) rates_import_override: - start : \"HH:MM:SS\" end : \"HH:MM:SS\" rate : pence date : \"YYYY-MM-DD\" rates_export_override: - start : \"HH:MM:SS\" end : \"HH:MM:SS\" rate : pence date : \"YYYY-MM-DD\" date is in the date format of \"YYYY-MM-DD\" e.g. \"2023-09-09\"","title":"Manually Over-riding energy rates"},{"location":"config-yml-settings/#car-charging-filtering","text":"You might want to remove your electric car charging data from the historical load so as to not bias the calculations, otherwise you will get high charge levels when the car was charged previously (e.g. last week). car_charging_hold - When true car charging data is removed from the simulation (by subtracting car_charging_rate), as you either charge from the grid or you use the Octopus Energy plugin to predict when it will charge correctly (default 6kw, configure with car_charging_threshold ) car_charging_threshold - Sets the threshold above which is assumed to be car charging and ignore (default 6 = 6kw) car_charging_energy - Set to a HA entity which is incrementing kWh data for the car charger, will be used instead of threshold for more accurate car charging data to filter out","title":"Car charging filtering"},{"location":"config-yml-settings/#planned-car-charging","text":"These features allow Predbat to know when you plan to charge your car. If you have Intelligent Octopus setup then you won't need to change these as it's done automatically via their app and the Octopus Energy plugin. octopus_intelligent_charging - When enabled Predbat will plan charging around the Intelligent Octopus slots, taking it into account for battery load and generating the slot information Only needed if you don't use Intelligent Octopus: car_charging_planned - Can be set to a sensor which lets Predbat know the car is plugged in and planned to charge during low rate slots, or False to disable, or True to always enable car_charging_planned_response - An array of values from the planned sensor which indicate that the car is plugged in and will charge in the next low rate slot car_charging_rate - Set to the car's charging rate (normally 7.5 for 7.5kw). car_charging_battery_size - Indicates the car's battery size in kWh, defaults to 100. It will be used to predict car charging stops. car_charging_now - When set links to a sensor that tells you that the car is currently charging. Predbat will then assume this 30 minute slot is used for charging regardless of the plan. If Octopus Intelligent Charging is enabled then it will also assume it's a low rate slot for the car/house, otherwise rates are taken from the normal rate data. car_charging_now_response - Sets the range of positive responses for car_charging_now , useful if you have a sensor for your car that isn't binary. car_charging_plan_time - When using Predbat-led planning set this to the time you want the car to be charged by car_charging_plan_smart - When true the cheapest slots can be used for charging, when False it will be the next low rate slot Connect to your cars sensors for accurate data: car_charging_limit - The % limit the car is set to charge to, link to a suitable sensor. Default is 100% car_charging_soc - The cars current % charge level, link to a suitable sensor. Default is 0% Control how your battery behaves during car charging: car_charging_from_battery - When True the car can drain the home battery, Predbat will manage the correct level of battery accordingly. When False home battery discharge will be prevented when your car charges, all load from the car and home will be from the grid. This is achieved by setting the discharge rate to 0 during car charging and to the maximum otherwise, hence if you turn this switch Off you won't be able to change your discharge rate outside Predbat. The home battery can still charge from the grid/solar in either case. Only use this if Predbat knows your car charging plan, e.g. you are using Intelligent Octopus or you use the car slots in Predbat to control your car charging. CAUTION: If you turn this switch back on during a car charging session you will need to set your battery discharge rate back to maximum manually. Multiple cars can be planned with Predbat, in which case you should set num_cars in apps.yaml to the number of cars you want to plan car_charging_limit , car_charging_planned , car_charging_battery_size and car_charging_soc must then be a list of values (e.g. 2 entries for 2 cars) If you have Intelligent Octopus then Car 0 will be managed by Octopus Energy plugin if enabled Each car will have it's own slot sensor created predbat_car_charging_slot_1 for car 1 Each car will have it's own SOC planning sensor created e.g predbat.car_soc_1 and predbat.car_soc_best_1 for car 1","title":"Planned car charging"},{"location":"config-yml-settings/#workarounds","text":"switch.predbat_set_read_only - When set prevents Predbat from making modifications to the inverter settings (regardless of the configuration). Predbat will continue making and updating its prediction plan every 5 minutes, but no inverter changes will be made. This is useful if you want to over-ride what predbat is planning to do, or whilst you are learning how Predbat works prior to turning it on 'in anger'. battery_scaling - Scales the battery reported SOC kWh e.g. if you set 0.8 your battery is only 80% of reported capacity. If you are going to chart this you may want to use predbat.soc_kw_h0 as your current status rather than the GivTCP entity so everything lines up import_export_scaling - Scaling the import & export data from GivTCP - used for workarounds inverter_clock_skew_start , inverter_clock_skew_end - Skews the setting of the charge slot registers vs the predicted start time (see apps.yml) inverter_clock_skew_discharge_start , inverter_clock_skew_discharge_end - Skews the setting of the discharge slot registers vs the predicted start time (see apps.yml) clock_skew - Skews the local time that Predbat uses (from AppDaemon), will change when real-time actions happen e.g. triggering a discharge. predbat_battery_capacity_nominal - When enabled Predbat uses the reported battery size from the Nominal field rather than from the normal GivTCP reported size. If your battery size is reported wrongly maybe try turning this on and see if it helps. inverter_battery_rate_min - Can be set to model the inverter not actually totally stopping discharging or charging the battery (value in watts). inverter_reserve_max - Global, sets the maximum reserve % that maybe set to the inverter, the default is 100. Can be set to 99 to workaround some gen2 inverters which refuse to be set to 100. car_charging_now - Can be used to workaround Ohme issue with Intelligent where the plan is not published, see Planned car charging","title":"Workarounds"},{"location":"config-yml-settings/#balance-inverters","text":"When you have two or more inverters it's possible they get out of sync so they are at different charge levels or they start to cross-charge (one discharges into another). When enabled, balance inverters tries to recover this situation by disabling either charging or discharging from one of the batteries until they re-align. The apps.yaml contains a setting balance_inverters_seconds which defines how often to run the balancing, 30 seconds is recommended if your machine is fast enough, but the default is 60 seconds. Enable the switch.predbat_balance_inverters_enable switch in Home Assistant to enable this feature. switch.predbat_balance_inverters_charge - Is used to toggle on/off balancing while the batteries are charging switch.predbat_balance_inverters_discharge - Is used to toggle on/off balancing while the batteries are discharging switch.predbat_balance_inverters_crosscharge - Is used to toggle on/off balancing when the batteries are cross charging input_number.predbat_balance_inverters_threshold_charge - Sets the minimum percentage divergence of SOC during charge before balancing, default is 1% input_number.predbat_balance_inverters_threshold_discharge - Sets the minimum percentage divergence of SOC during discharge before balancing, default is 1%","title":"Balance Inverters"},{"location":"config-yml-settings/#triggers","text":"The trigger feature is useful to help trigger your own automation based on Predbat determining that you have spare solar energy or battery that you would otherwise export The triggers count export energy until the next active charge slot only. For each trigger give a name, the minutes of export needed and the energy required in that time Multiple triggers can be set at once so in total you could use too much energy if all run Each trigger create an entity called 'binary_sensor.predbat_export_trigger_ name ' which will be turned on when the condition is valid connect this to your automation to start whatever you want to trigger. Set the name for each trigger, the number of minutes of solar export you need, and the amount of energy in kwH you will need available during that time period in apps.yaml: For example: export_triggers: - name: \"large\" minutes: 60 energy: 1.0 - name: \"small\" minutes: 15 energy: 0.25 If you wish to trigger based on charging or discharging the battery rather than spare solar energy you can instead use the following binary sensors binary_sensor.predbat_charging - Will be True when the home battery is inside a charge slot (either being charged or being held at a level). Note that this does include charge freeze slots where the discharge rate is set to zero without charging the battery. binary_sensor.predbat_discharging - Will be True when the home battery is inside a force discharge slot. This does not include discharge freeze slots where the charge rate is set to zero to export excess solar only.","title":"Triggers"},{"location":"config-yml-settings/#holiday-mode","text":"When you go away you are likely to use less electricity and so the previous load data will be quite pessimistic. Using the configuration item input_number.predbat_holiday_days_left in Home assistant you can set the number of full days that you will be away for (including today). The number will count down by 1 day at midnight until it gets back to zero. When holiday days left are non-zero, the holiday mode is active. When holiday mode is active the historical load data will be taken from yesterday's data (1 day ago) rather than from the days_previous setting in apps.yaml. This means Predbat will adjust more quickly to the new usage pattern. If you have been away for a longer period of time (more than your normal days_previous setting) then obviously it's going to take longer for the historical data to catch up, you could then enable holiday mode for another 7 days after your return. In summary: For short holidays set holiday_days_left to the number of full days you are away, including today but excluding the return day For longer holidays set holiday_days_left to the number of days you are away plus another 7 days until the data catches back up","title":"Holiday mode"},{"location":"configuration-guide/","text":"Configuration guide First get the basics set up, ensure you have the inverter controls configured, the historical load data and the solar forecast in place. Make sure your energy rates are configured correctly for import and export. If you have an EV try to set up the car charging sensor correctly so the tool can tell what part of your historical load is EV charging. You might want to also set to the car charging plan so you can predict when your car is plugged in and how much it will charge. You should try to tune inverter_loss , battery_loss and battery_loss_discharge to the correct % loss for your system in order to get more accurate predictions. Around 4% for each is good for a hybrid inverter. Also set inverter_hybrid to True or False depending on if you have a Hybrid or AC-Coupled battery. The setting input_number.metric_battery_cycle ( expert mode ) can be used to put a cost on using your battery for charging and discharging. In theory if you think your battery will last say 6000 complete cycles and cost you \u00a34000 and is 9.5kWh then each cycle is 19kWh and so the cost is \u00a34000 / 19 / 6000 = 3.5p. If you configure this number higher then more expensive plans will be selected which avoids charging and discharging your battery as much. The default is 2p but can be set to 0 if you want to turn this off. Note that the cycle cost will not be included in the cost predictions, just taken into account in the planning stage. Note: Setting this to a non-zero value will increase your daily cost, but will reduce your home battery usage. Cloud coverage is modelled by using difference between PV and PV10 is used to work out a cloud factor, this modulates the PV output predictions up and down accordingly as if there were passing clouds. This can have an impact on planning, especially for things like freeze charging which could assume the PV will cover the house load but it might not due to clouds. Below is a guide to some of the tariff options, in theory most tariffs will work out of the box but still it's worth reviewing your settings. Fixed daily rates With a fixed daily rate tariff you will just be predicting the battery levels, no charging or discharging is required although it won't hurt if you leave these options enabled. Cheap night rate with bad export rate (e.g. Octopus Go, Economy 7 etc) In this scenario you will want to charge overnight based on the next day's solar forecast. Recommended settings - these must be changed in Home Assistant once Predbat is running: Item Value Comment select.predbat_mode Control Charge You want the tool to calculate and control charging input_number.predbat_best_soc_keep 2.0 Tweak this to control what battery level you want to keep as a backup in case you use more energy switch.predbat_combine_charge_slots True Use one big charge slot If you are using expert mode then these options maybe worth reviewing: Item Value Comment input_number.predbat_forecast_plan_hours 24 If you set this to 24 then you will have quicker updates, the cycle repeats itself anyhow switch.predbat_combine_charge_slots True As you have just one overnight rate then one slot is fine input_number.metric_min_improvement 0 Charge less if it's cost neutral You should set select.predbat_mode to Control Charge Cheap night rate, with a good export rate (e.g. Intelligent Octopus with Octopus Outgoing) Follow the instructions from the Cheap Night rate above, but also you will also want to have automatic discharge occurring when the export rates are profitable. Item Value Comment select.predbat_mode Control Charge & Discharge You want the tool to calculate and control charging and discharging input_number.predbat_best_soc_keep 2.0 Tweak this to control what battery level you want to keep as a backup in case you use more energy switch.predbat_combine_charge_slots True Use one big charge slot If you are using expert mode then these options maybe worth reviewing, otherwise ignore this: Item Value Comment input_number.predbat_forecast_plan_hours 24 If you set this to 24 then you will have quicker updates, the cycle repeats itself anyhow switch.predbat_combine_charge_slots ? Going to False will allow charging at more expensive day rates when it's worth it to export mode input_number.metric_min_improvement 0 Charge less if it's cost neutral input_number.metric_min_improvement_discharge 0.1 Discharge only if there is a profit input_number.metric_battery_cycle ? Higher numbers mean less charging and discharging but higher costs input_number.predbat_best_soc_min ? Can be set non-zero if you want to force a minimum charge level You should set select.predbat_mode to Control Charge & Discharge Multiple rates for import and export (e.g. Octopus Flux & Cozy) Follow the instructions from Cheap Night rate above, but also you will want to have automatic discharge when the export rates are profitable. Recommended settings - these must be changed in Home Assistant once Predbat is running: Item Value Comment select.predbat_mode Control Charge & Discharge You want the tool to calculate and control charging and discharging input_number.predbat_best_soc_keep 0.5 Use the full battery without going empty switch.predbat_combine_charge_slots True Use one big charge slot If you are using expert mode then these options maybe worth reviewing, otherwise ignore this: Item Value Comment input_number.predbat_forecast_plan_hours 24 If you set this to 24 then you will have quicker updates, the cycle repeats itself anyhow switch.predbat_combine_charge_slots ? Going to False will allow charging at more expensive day rates when it's worth it to export mode input_number.metric_min_improvement 0 Charge less if it's cost neutral input_number.metric_min_improvement_discharge 0.1 Discharge only if there is a profit input_number.metric_battery_cycle ? Higher numbers mean less charging and discharging but higher costs input_number.predbat_best_soc_min 0 Don't use non-zero otherwise all slots will be force charging You should set select.predbat_mode to Control Charge & Discharge Half hourly variable rates (e.g. Octopus Agile) Recommended settings - these must be changed in Home Assistant once Predbat is running: Item Value Comment select.predbat_mode Control Charge & Discharge You want the tool to calculate and control charging and discharging input_number.predbat_best_soc_keep 0.5 Use the full battery without going empty switch.predbat_combine_charge_slots True Use one big charge slot If you are using expert mode then these options maybe worth reviewing, otherwise ignore this: Item Value Comment input_number.predbat_forecast_plan_hours 24-48 If you set this to 24 then you will have quicker updates, going to 36/48 for a longer plan input_number.metric_min_improvement 0 Charge less if it's cost neutral input_number.metric_min_improvement_discharge 0.1 Discharge only if there is a profit input_number.metric_battery_cycle ? Higher numbers mean less charging and discharging but higher costs input_number.predbat_best_soc_min 0 Don't use non-zero otherwise all slots will be force charging switch.calculate_fast_plan False The fast plan feature reduces accuracy of planning You should set select.predbat_mode to Control Charge & Discharge","title":"Configuration guide"},{"location":"configuration-guide/#configuration-guide","text":"First get the basics set up, ensure you have the inverter controls configured, the historical load data and the solar forecast in place. Make sure your energy rates are configured correctly for import and export. If you have an EV try to set up the car charging sensor correctly so the tool can tell what part of your historical load is EV charging. You might want to also set to the car charging plan so you can predict when your car is plugged in and how much it will charge. You should try to tune inverter_loss , battery_loss and battery_loss_discharge to the correct % loss for your system in order to get more accurate predictions. Around 4% for each is good for a hybrid inverter. Also set inverter_hybrid to True or False depending on if you have a Hybrid or AC-Coupled battery. The setting input_number.metric_battery_cycle ( expert mode ) can be used to put a cost on using your battery for charging and discharging. In theory if you think your battery will last say 6000 complete cycles and cost you \u00a34000 and is 9.5kWh then each cycle is 19kWh and so the cost is \u00a34000 / 19 / 6000 = 3.5p. If you configure this number higher then more expensive plans will be selected which avoids charging and discharging your battery as much. The default is 2p but can be set to 0 if you want to turn this off. Note that the cycle cost will not be included in the cost predictions, just taken into account in the planning stage. Note: Setting this to a non-zero value will increase your daily cost, but will reduce your home battery usage. Cloud coverage is modelled by using difference between PV and PV10 is used to work out a cloud factor, this modulates the PV output predictions up and down accordingly as if there were passing clouds. This can have an impact on planning, especially for things like freeze charging which could assume the PV will cover the house load but it might not due to clouds. Below is a guide to some of the tariff options, in theory most tariffs will work out of the box but still it's worth reviewing your settings.","title":"Configuration guide"},{"location":"configuration-guide/#fixed-daily-rates","text":"With a fixed daily rate tariff you will just be predicting the battery levels, no charging or discharging is required although it won't hurt if you leave these options enabled.","title":"Fixed daily rates"},{"location":"configuration-guide/#cheap-night-rate-with-bad-export-rate-eg-octopus-go-economy-7-etc","text":"In this scenario you will want to charge overnight based on the next day's solar forecast. Recommended settings - these must be changed in Home Assistant once Predbat is running: Item Value Comment select.predbat_mode Control Charge You want the tool to calculate and control charging input_number.predbat_best_soc_keep 2.0 Tweak this to control what battery level you want to keep as a backup in case you use more energy switch.predbat_combine_charge_slots True Use one big charge slot If you are using expert mode then these options maybe worth reviewing: Item Value Comment input_number.predbat_forecast_plan_hours 24 If you set this to 24 then you will have quicker updates, the cycle repeats itself anyhow switch.predbat_combine_charge_slots True As you have just one overnight rate then one slot is fine input_number.metric_min_improvement 0 Charge less if it's cost neutral You should set select.predbat_mode to Control Charge","title":"Cheap night rate with bad export rate (e.g. Octopus Go, Economy 7 etc)"},{"location":"configuration-guide/#cheap-night-rate-with-a-good-export-rate-eg-intelligent-octopus-with-octopus-outgoing","text":"Follow the instructions from the Cheap Night rate above, but also you will also want to have automatic discharge occurring when the export rates are profitable. Item Value Comment select.predbat_mode Control Charge & Discharge You want the tool to calculate and control charging and discharging input_number.predbat_best_soc_keep 2.0 Tweak this to control what battery level you want to keep as a backup in case you use more energy switch.predbat_combine_charge_slots True Use one big charge slot If you are using expert mode then these options maybe worth reviewing, otherwise ignore this: Item Value Comment input_number.predbat_forecast_plan_hours 24 If you set this to 24 then you will have quicker updates, the cycle repeats itself anyhow switch.predbat_combine_charge_slots ? Going to False will allow charging at more expensive day rates when it's worth it to export mode input_number.metric_min_improvement 0 Charge less if it's cost neutral input_number.metric_min_improvement_discharge 0.1 Discharge only if there is a profit input_number.metric_battery_cycle ? Higher numbers mean less charging and discharging but higher costs input_number.predbat_best_soc_min ? Can be set non-zero if you want to force a minimum charge level You should set select.predbat_mode to Control Charge & Discharge","title":"Cheap night rate, with a good export rate (e.g. Intelligent Octopus with Octopus Outgoing)"},{"location":"configuration-guide/#multiple-rates-for-import-and-export-eg-octopus-flux-cozy","text":"Follow the instructions from Cheap Night rate above, but also you will want to have automatic discharge when the export rates are profitable. Recommended settings - these must be changed in Home Assistant once Predbat is running: Item Value Comment select.predbat_mode Control Charge & Discharge You want the tool to calculate and control charging and discharging input_number.predbat_best_soc_keep 0.5 Use the full battery without going empty switch.predbat_combine_charge_slots True Use one big charge slot If you are using expert mode then these options maybe worth reviewing, otherwise ignore this: Item Value Comment input_number.predbat_forecast_plan_hours 24 If you set this to 24 then you will have quicker updates, the cycle repeats itself anyhow switch.predbat_combine_charge_slots ? Going to False will allow charging at more expensive day rates when it's worth it to export mode input_number.metric_min_improvement 0 Charge less if it's cost neutral input_number.metric_min_improvement_discharge 0.1 Discharge only if there is a profit input_number.metric_battery_cycle ? Higher numbers mean less charging and discharging but higher costs input_number.predbat_best_soc_min 0 Don't use non-zero otherwise all slots will be force charging You should set select.predbat_mode to Control Charge & Discharge","title":"Multiple rates for import and export (e.g. Octopus Flux &amp; Cozy)"},{"location":"configuration-guide/#half-hourly-variable-rates-eg-octopus-agile","text":"Recommended settings - these must be changed in Home Assistant once Predbat is running: Item Value Comment select.predbat_mode Control Charge & Discharge You want the tool to calculate and control charging and discharging input_number.predbat_best_soc_keep 0.5 Use the full battery without going empty switch.predbat_combine_charge_slots True Use one big charge slot If you are using expert mode then these options maybe worth reviewing, otherwise ignore this: Item Value Comment input_number.predbat_forecast_plan_hours 24-48 If you set this to 24 then you will have quicker updates, going to 36/48 for a longer plan input_number.metric_min_improvement 0 Charge less if it's cost neutral input_number.metric_min_improvement_discharge 0.1 Discharge only if there is a profit input_number.metric_battery_cycle ? Higher numbers mean less charging and discharging but higher costs input_number.predbat_best_soc_min 0 Don't use non-zero otherwise all slots will be force charging switch.calculate_fast_plan False The fast plan feature reduces accuracy of planning You should set select.predbat_mode to Control Charge & Discharge","title":"Half hourly variable rates (e.g. Octopus Agile)"},{"location":"creating-charts/","text":"Creating the charts To create the fancy charts: Install Apex Charts https://github.com/RomRider/apexcharts-card There are multiple charts, for each section of the example chart yaml file , create a new apexcharts card and copy the YAML into it. Customise as you like See the video guides for a walkthrough of what the different charts show. Example charts:","title":"Creating the charts"},{"location":"creating-charts/#creating-the-charts","text":"To create the fancy charts: Install Apex Charts https://github.com/RomRider/apexcharts-card There are multiple charts, for each section of the example chart yaml file , create a new apexcharts card and copy the YAML into it. Customise as you like See the video guides for a walkthrough of what the different charts show. Example charts:","title":"Creating the charts"},{"location":"customisation/","text":"Customisation These are configuration items that you can modify to fit your needs, you can configure these in Home Assistant directly. Changing the items in apps.yaml will have no effect. See Displaying output data for information on how to view and edit these entities within Home Assistant. Predbat mode The mode that Predbat operates in will change the operation, this can be configured with select.predbat_mode drop down menu as follows: Monitor Control SOC Only Control charge Control charge & discharge If switch.predbat_set_read_only is True then the plan will be updated but the inverter controls will not be used, this is useful to pause Predbat operation while an automation takes over. CAUTION: If you use Read only mode while the inverter is in a particular state e.g. with discharge disable, you will need to return it to the desired state yourself Predbat Monitor mode In monitor mode Predbat will not control charging or discharging, inverter balancing will take place if enabled, the plan will show just what is expected based on the current inverter configuration alone. Predbat Control SOC Only mode In Control SOC Only mode Predbat will adjust the target charge percentage (SOC target) according to the Best plan, but the charge window will not be modified. This can be useful if you just have one fixed charge slot per day and you only want Predbat to control the percentage. CAUTION: If the charge window is disabled then no charging will take place. Predbat Control Charge mode In Control Charge mode Predbat will set the charge times and charge percentages according to the Best plan, charging can be enabled and disabled by Predbat. Predbat Control Charge & Discharge mode In Control Charge and Discharge mode Predbat will set both charge and discharge times and control charge and discharge percentages. If you have set the switch.predbat_set_discharge_freeze_only to True then forced export won't occur but Predbat can force the export of solar power to the grid when desired. Expert mode Predbat has a toggle switch called switch.predbat_expert_mode which is off by default for new installs (on by default for upgraded installs). A lot of configuration items will not be available unless expert mode is enabled. It's recommended for new users to start without expert mode and then maybe enable it later once you become more confident with the tool. Performance related By default Predbat controls the inverter and updates the plan every 5 minutes, this can however use a lot of CPU power especially on more complex tariffs like Agile when run on lower power machines such as Raspberry PIs and some thin clients. You can tweak input_number.predbat_calculate_plan_every ( expert mode ) to reduce the frequency of replanning while keeping the inverter control in the 5 minute slots. E.g. a value of 10 or 15 minutes should also give good results. If you have performance problems leave switch.predbat_calculate_second_pass ( expert mode ) turned Off as it's quite CPU intensive and provides very little improvement for most systems. If you have performance problems turn switch.predbat_calculate_fast_plan ( expert mode ) On to help reduce your CPU load. Battery loss options input_number.battery_loss accounts for energy lost charging the battery, default 0.05 is 5% input_number.battery_loss_discharge accounts for energy lost discharging the battery, default 0.05 is 5% input_number.inverter_loss accounts for energy loss during going from DC to AC or AC to DC, default is 0% for legacy reasons but please adjust. switch.inverter_hybrid When True you have a hybrid inverter so no inverter losses for DC charging. When false you have inverter losses as it's AC coupled battery. input_number.metric_battery_cycle ( expert mode ) Sets the cost in pence per kWh of using your battery for charging and discharging. Higher numbers will reduce battery cycles at the expensive of higher energy costs. Figures of around 1p-5p are recommended, the default is 0. input_number.predbat_metric_battery_value_scaling ( expert mode ) Can be used to scale the value of the energy in the battery at the end of the plan. The battery value is accounted for in the optimisations at the lowest future import rate including charging and inverter losses. A value of 1.0 means no change to this, while lower than 1.0 means to value future battery levels less, greater than 1.0 will value it more (and hence hold more charge at the end of the plan). Scaling and weight options input_number.battery_rate_max_scaling adjusts your maximum charge/discharge rate from that reported by GivTCP e.g. a value of 1.1 would simulate a 10% faster charge/discharge than reported by the inverter input_number.load_scaling is a Scaling factor applied to historical load, tune up if you want to be more pessimistic on future consumption Use 1.0 to use exactly previous load data (1.1 would add 10% to load) input_number.load_scaling10 is a Scaling factor applied to historical load only for the PV10% scenario (this is in addition to load_scaling). This can be used to make the 10% scenario take into account extra load usage and hence be more pessimistic while leaving the central scenario unchanged. The default is 1.1 meaning an extra 10% load is added. This will only have an impact if the PV 10% weighting is non-zero. input_number.pv_scaling is a scaling factor applied to pv data, tune down if you want to be more pessimistic on PV production vs Solcast Use 1.0 to use exactly the Solcast data (0.9 would remove 10% from forecast) input_number.pv_metric10_weight is the weighting given to the 10% PV scenario. Use 0.0 to disable this. A value of 0.1 assumes that 1:10 times we get the 10% scenario and hence to count this in the metric benefit/cost. A value of 0.15 is recommended. Historical load data The historical load data is taken from the load sensor as configured in apps.yaml and the days are selected using days_previous and weighted using *days_previous_weight in the same configuration file switch.predbat_load_filter_modal ( expert mode ) when enabled will automatically discard the lowest daily consumption day from the list of days to use (provided you have more than 1 day selected in days_previous). This can be used to ignore a single low usage day in your average calculation. By default is feature is enabled but can be disabled only in expert mode. Car charging hold options Car charging hold is a feature where you try to filter out previous car charging from your historical data so that future predictions are more accurate. When car_charging_hold is enabled loads of above the power threshold car_charging_threshold then you are assumed to be charging the car and car_charging_rate will be subtracted from the historical load data. For more accurate results can you use an incrementing energy sensor set with car_charging_energy in the apps.yml then historical data will be subtracted from the load data instead. car_charging_energy_scale Is used to scale the car_charging_energy sensor, the default units are kWh so if you had a sensor in watts you might use 0.001 instead. car_charging_rate sets the rate your car is assumed to charge at, but will be pulled automatically from Octopus Energy plugin if enabled car_charging_loss gives the amount of energy lost when charging the car (load in the home vs energy added to the battery). A good setting is 0.08 which is 8%. Car charging plan options Car charging planning - is only used if Intelligent Octopus isn't enabled and car_charging_planned is connected correctly. This feature allows Predbat to create a plan for when you car will charge, but you will have to create an automation to trigger your car to charge using binary_sensor.predbat_car_charging_slot if you want it to match the plan. car_charging_plan_time Is set to the time you expect your car to be fully charged by car_charging_plan_smart When enabled allows Predbat to allocated car charging slots to the cheapest times, when disabled all low rate slots will be used in time order. switch.predbat_octopus_intelligent_charging when true enables the Intelligent Octopus charging feature which will make Predbat create a car charging plan which is taken from the Intelligent Octopus plan you must have set octopus_intelligent_slot sensor in apps.yaml to enable this feature. If Octopus Intelligent Charging is enabled the switch 'switch.predbat_octopus_intelligent_ignore_unplugged' ( expert mode ) can be used to prevent Predbat from assuming the car will be charging when the car is unplugged. This will only work correctly if car_charging_planned is set correctly in apps.yaml to detect your car being plugged in. Calculation options See the Predbat mode setting as above for basic calculation options switch.predbat_calculate_fast_plan ( expert mode ) When True the plan is calculated with a limited number of windows to make calculations faster. When False (default) all windows are considered but planning will take a little longer but be more accurate. The end result is unlikely to change in fast mode as the next 8 windows are always considered in the plan, but the longer term plan will be less accurate. switch.predbat_calculate_discharge_oncharge ( expert mode ) When True calculated discharge slots will disable or move charge slots, allowing them to intermix. When False discharge slots will never be placed into charge slots. switch.predbat_calculate_tweak_plan ( expert mode ) When True causes Predbat to perform a second pass optimisation across the next 8 charge and discharge windows in time order. This can help to slightly improve the plan for tariffs like Agile but can make it worse in some fixed rate tariffs which you want to discharge late. switch.predbat_calculate_second_pass ( expert mode ) When True causes Predbat to perform a second pass optimisation across all the charge and discharge windows in time order. NOTE: This feature is quite slow and so may need a higher performance machine This can help to slightly improve the plan for tariffs like Agile but can make it worse in some fixed rate tariffs which you want to discharge late. Battery margins and metrics options best_soc_keep is minimum battery level to try to keep above during the whole period of the simulation time, soft constraint only (use min for hard constraint). It's usually good to have this above 0 to allow some margin in case you use more energy than planned between charge slots. best_soc_min ( expert mode ) sets the minimum charge level (in kWh) for charging during each slot and the minimum discharge level also (set to 0 if you want to skip some slots). If you set this non-zero you will need to use the low rate threshold to control which slots you charge from or you may charge all the time. best_soc_max ( expert mode ) sets the maximum charge level (in kWh) for charging during each slot. A value of 0 disables this feature. combine_charge_slots Controls if charge slots of > 30 minutes can be combined. When disabled they will be split up, increasing run times but potentially more accurate for planning. Turn this off if you want to enable ad-hoc import during long periods of higher rates but you wouldn't charge normally in that period (e.g. pre-charge at day rate before a saving session). The default is enable (True) combine_discharge_slots ( expert mode ) Controls if discharge slots of > 30 minute can be combined. When disabled they will be split up, increasing run times but potentially more accurate for planning. The default is disabled (False) metric_min_improvement ( expert mode ) sets the minimum cost improvement that it's worth lowering the battery SOC % for. If it's 0 then this is disabled and the battery will be charged less if it's cost neutral. If you use pv_metric10_weight then you probably don't need to enable this as the 10% forecast does the same thing better Do not use if you have multiple charge windows in a given period as it won't lead to good results (e.g. Agile) You could even go to something like -0.1 to say you would charge less even if it cost up to 0.1p more (best used with metric10) metric_min_improvement_discharge ( expert mode ) Sets the minimum cost improvement it's worth discharging for. A value of 0.1 is the default which prevents any marginal discharges. If you increase this value then discharges will become less common and shorter. rate_low_threshold ( expert mode ) When 0 (default) this is automatic but can be overridden. When non zero it sets the threshold below average rates as the minimum to consider for a charge window, 0.8 = 80% of average rate If you set this too low you might not get enough charge slots. If it's too high you might get too many in the 24-hour period which makes optimisation harder. rate_high_threshold ( expert mode ) When 0 (default) this is automatic but can be overridden. When non zero it sets the threshold above average rates as to the minimum export rate to consider exporting for - 1.2 = 20% above average rate If you set this too high you might not get any export slots. If it's too low you might get too many in the 24-hour period. metric_future_rate_offset_import ( expert mode ) Sets an offset to apply to future import energy rates that are not yet published, best used for variable rate tariffs such as Agile import where the rates are not published until 4pm. If you set this to a positive value then Predbat will assume unpublished import rates are higher by the given amount. metric_future_rate_offset_export ( expert mode ) Sets an offset to apply to future export energy rates that are not yet published, best used for variable rate tariffs such as Agile export where the rates are not published until 4pm. If you set this to a negative value then Predbat will assume unpublished export rates are lower by the given amount. switch.predbat_calculate_inday_adjustment ( expert mode ) Enabled by default with damping of 0.95. When enabled will calculate the difference between today's actual load and today's predicated load and adjust the rest of the days usage prediction accordingly. A scale factor can be set with input_number.predbat_metric_inday_adjust_damping ( expert mode ) to either scale up or down the impact of the in-day adjustment (lower numbers scale down its impact). The in-day adjustment factor can be see in predbat.load_inday_adjustment and charted with the In Day Adjustment chart (template can be found in the charts template in Github). Inverter control options set_status_notify Enables mobile notification about changes to the Predbat state (e.g. Charge, Discharge etc). On by default. set_inverter_notify Enables mobile notification about all changes to inverter registers (e.g. setting window, turning discharge on/off). Off by default. switch.predbat_set_charge_low_power Enables low power charging mode where the max charge rate will be limited to the lowest possible to meet the charge target. Only really effective for charge windows >30 minutes. Off by default. set_reserve_enable ( expert_mode ) When enabled the reserve setting is used to hold the battery charge level once it has been reached or to protect against discharging beyond the set limit. Enabled by default. set_charge_freeze ( expert mode ) When enabled will allow Predbat to hold the current battery level while drawing from the grid/solar as an alternative to charging. Enabled by default. set_discharge_freeze_only ( expert mode ) When enabled forced discharge is prevented, but discharge freeze can be used (if enabled) to export excess solar rather than charging the battery. This is useful with tariffs that pay you for solar exports but don't allow forced export (brown energy). If you have inverter_hybrid set to False then if inverter_soc_reset ( expert mode ) is set to True then the target SOC % will be reset to 100% outside a charge window. This may be required for AIO inverter to ensure it charges from solar. set_reserve_min Defines the reserve percentage to reset the reserve to when not in use, a value of 4 is the minimum and recommended to make use of the full battery inverter_soc_reset ( expert mode ) When enabled the target SOC for the inverter(s) will be reset to 100% when a charge slot is not active, this can be used to workaround some firmware issues where the SOC target is used for solar charging as well as grid charging. When disabled the SOC % will not be changed after a charge slot. This is disabled by default. IBoost model options IBoost model, when enabled with iboost_enable tries to model excess solar energy being used to heat hot water (or similar). The predicted output from the IBoost model is returned in iboost_best . The following entities are only available when you turn on iboost enable: iboost_max_energy Sets the max energy sets the number of kwh that iBoost can consume during a day before turning off - default 3kWh iboost_max_power Sets the maximum power in watts to consume - default 2400 iboost_min_power Sets the minimum power in watts to consume - default 500 iboost_min_soc sets the minimum home battery soc % to enable iboost on, default 0 You will see predbat.iboost_today entity which tracks the estimated amount consumed during the day, and resets at night If you have an incrementing Sensor that tracks IBoost energy usage then you should set iboost_energy_today sensor in apps.yaml to point to it and optionally set iboost_energy_scaling if the sensor isn't in kWh. Debug debug_enable when on prints lots of debug, leave off by default plan_debug ( expert mode ) when enabled adds some extra debug to the Predbat HTML plan","title":"Customisation"},{"location":"customisation/#customisation","text":"These are configuration items that you can modify to fit your needs, you can configure these in Home Assistant directly. Changing the items in apps.yaml will have no effect. See Displaying output data for information on how to view and edit these entities within Home Assistant.","title":"Customisation"},{"location":"customisation/#predbat-mode","text":"The mode that Predbat operates in will change the operation, this can be configured with select.predbat_mode drop down menu as follows: Monitor Control SOC Only Control charge Control charge & discharge If switch.predbat_set_read_only is True then the plan will be updated but the inverter controls will not be used, this is useful to pause Predbat operation while an automation takes over. CAUTION: If you use Read only mode while the inverter is in a particular state e.g. with discharge disable, you will need to return it to the desired state yourself","title":"Predbat mode"},{"location":"customisation/#predbat-monitor-mode","text":"In monitor mode Predbat will not control charging or discharging, inverter balancing will take place if enabled, the plan will show just what is expected based on the current inverter configuration alone.","title":"Predbat Monitor mode"},{"location":"customisation/#predbat-control-soc-only-mode","text":"In Control SOC Only mode Predbat will adjust the target charge percentage (SOC target) according to the Best plan, but the charge window will not be modified. This can be useful if you just have one fixed charge slot per day and you only want Predbat to control the percentage. CAUTION: If the charge window is disabled then no charging will take place.","title":"Predbat Control SOC Only mode"},{"location":"customisation/#predbat-control-charge-mode","text":"In Control Charge mode Predbat will set the charge times and charge percentages according to the Best plan, charging can be enabled and disabled by Predbat.","title":"Predbat Control Charge mode"},{"location":"customisation/#predbat-control-charge-discharge-mode","text":"In Control Charge and Discharge mode Predbat will set both charge and discharge times and control charge and discharge percentages. If you have set the switch.predbat_set_discharge_freeze_only to True then forced export won't occur but Predbat can force the export of solar power to the grid when desired.","title":"Predbat Control Charge &amp; Discharge mode"},{"location":"customisation/#expert-mode","text":"Predbat has a toggle switch called switch.predbat_expert_mode which is off by default for new installs (on by default for upgraded installs). A lot of configuration items will not be available unless expert mode is enabled. It's recommended for new users to start without expert mode and then maybe enable it later once you become more confident with the tool.","title":"Expert mode"},{"location":"customisation/#performance-related","text":"By default Predbat controls the inverter and updates the plan every 5 minutes, this can however use a lot of CPU power especially on more complex tariffs like Agile when run on lower power machines such as Raspberry PIs and some thin clients. You can tweak input_number.predbat_calculate_plan_every ( expert mode ) to reduce the frequency of replanning while keeping the inverter control in the 5 minute slots. E.g. a value of 10 or 15 minutes should also give good results. If you have performance problems leave switch.predbat_calculate_second_pass ( expert mode ) turned Off as it's quite CPU intensive and provides very little improvement for most systems. If you have performance problems turn switch.predbat_calculate_fast_plan ( expert mode ) On to help reduce your CPU load.","title":"Performance related"},{"location":"customisation/#battery-loss-options","text":"input_number.battery_loss accounts for energy lost charging the battery, default 0.05 is 5% input_number.battery_loss_discharge accounts for energy lost discharging the battery, default 0.05 is 5% input_number.inverter_loss accounts for energy loss during going from DC to AC or AC to DC, default is 0% for legacy reasons but please adjust. switch.inverter_hybrid When True you have a hybrid inverter so no inverter losses for DC charging. When false you have inverter losses as it's AC coupled battery. input_number.metric_battery_cycle ( expert mode ) Sets the cost in pence per kWh of using your battery for charging and discharging. Higher numbers will reduce battery cycles at the expensive of higher energy costs. Figures of around 1p-5p are recommended, the default is 0. input_number.predbat_metric_battery_value_scaling ( expert mode ) Can be used to scale the value of the energy in the battery at the end of the plan. The battery value is accounted for in the optimisations at the lowest future import rate including charging and inverter losses. A value of 1.0 means no change to this, while lower than 1.0 means to value future battery levels less, greater than 1.0 will value it more (and hence hold more charge at the end of the plan).","title":"Battery loss options"},{"location":"customisation/#scaling-and-weight-options","text":"input_number.battery_rate_max_scaling adjusts your maximum charge/discharge rate from that reported by GivTCP e.g. a value of 1.1 would simulate a 10% faster charge/discharge than reported by the inverter input_number.load_scaling is a Scaling factor applied to historical load, tune up if you want to be more pessimistic on future consumption Use 1.0 to use exactly previous load data (1.1 would add 10% to load) input_number.load_scaling10 is a Scaling factor applied to historical load only for the PV10% scenario (this is in addition to load_scaling). This can be used to make the 10% scenario take into account extra load usage and hence be more pessimistic while leaving the central scenario unchanged. The default is 1.1 meaning an extra 10% load is added. This will only have an impact if the PV 10% weighting is non-zero. input_number.pv_scaling is a scaling factor applied to pv data, tune down if you want to be more pessimistic on PV production vs Solcast Use 1.0 to use exactly the Solcast data (0.9 would remove 10% from forecast) input_number.pv_metric10_weight is the weighting given to the 10% PV scenario. Use 0.0 to disable this. A value of 0.1 assumes that 1:10 times we get the 10% scenario and hence to count this in the metric benefit/cost. A value of 0.15 is recommended.","title":"Scaling and weight options"},{"location":"customisation/#historical-load-data","text":"The historical load data is taken from the load sensor as configured in apps.yaml and the days are selected using days_previous and weighted using *days_previous_weight in the same configuration file switch.predbat_load_filter_modal ( expert mode ) when enabled will automatically discard the lowest daily consumption day from the list of days to use (provided you have more than 1 day selected in days_previous). This can be used to ignore a single low usage day in your average calculation. By default is feature is enabled but can be disabled only in expert mode.","title":"Historical load data"},{"location":"customisation/#car-charging-hold-options","text":"Car charging hold is a feature where you try to filter out previous car charging from your historical data so that future predictions are more accurate. When car_charging_hold is enabled loads of above the power threshold car_charging_threshold then you are assumed to be charging the car and car_charging_rate will be subtracted from the historical load data. For more accurate results can you use an incrementing energy sensor set with car_charging_energy in the apps.yml then historical data will be subtracted from the load data instead. car_charging_energy_scale Is used to scale the car_charging_energy sensor, the default units are kWh so if you had a sensor in watts you might use 0.001 instead. car_charging_rate sets the rate your car is assumed to charge at, but will be pulled automatically from Octopus Energy plugin if enabled car_charging_loss gives the amount of energy lost when charging the car (load in the home vs energy added to the battery). A good setting is 0.08 which is 8%.","title":"Car charging hold options"},{"location":"customisation/#car-charging-plan-options","text":"Car charging planning - is only used if Intelligent Octopus isn't enabled and car_charging_planned is connected correctly. This feature allows Predbat to create a plan for when you car will charge, but you will have to create an automation to trigger your car to charge using binary_sensor.predbat_car_charging_slot if you want it to match the plan. car_charging_plan_time Is set to the time you expect your car to be fully charged by car_charging_plan_smart When enabled allows Predbat to allocated car charging slots to the cheapest times, when disabled all low rate slots will be used in time order. switch.predbat_octopus_intelligent_charging when true enables the Intelligent Octopus charging feature which will make Predbat create a car charging plan which is taken from the Intelligent Octopus plan you must have set octopus_intelligent_slot sensor in apps.yaml to enable this feature. If Octopus Intelligent Charging is enabled the switch 'switch.predbat_octopus_intelligent_ignore_unplugged' ( expert mode ) can be used to prevent Predbat from assuming the car will be charging when the car is unplugged. This will only work correctly if car_charging_planned is set correctly in apps.yaml to detect your car being plugged in.","title":"Car charging plan options"},{"location":"customisation/#calculation-options","text":"See the Predbat mode setting as above for basic calculation options switch.predbat_calculate_fast_plan ( expert mode ) When True the plan is calculated with a limited number of windows to make calculations faster. When False (default) all windows are considered but planning will take a little longer but be more accurate. The end result is unlikely to change in fast mode as the next 8 windows are always considered in the plan, but the longer term plan will be less accurate. switch.predbat_calculate_discharge_oncharge ( expert mode ) When True calculated discharge slots will disable or move charge slots, allowing them to intermix. When False discharge slots will never be placed into charge slots. switch.predbat_calculate_tweak_plan ( expert mode ) When True causes Predbat to perform a second pass optimisation across the next 8 charge and discharge windows in time order. This can help to slightly improve the plan for tariffs like Agile but can make it worse in some fixed rate tariffs which you want to discharge late. switch.predbat_calculate_second_pass ( expert mode ) When True causes Predbat to perform a second pass optimisation across all the charge and discharge windows in time order. NOTE: This feature is quite slow and so may need a higher performance machine This can help to slightly improve the plan for tariffs like Agile but can make it worse in some fixed rate tariffs which you want to discharge late.","title":"Calculation options"},{"location":"customisation/#battery-margins-and-metrics-options","text":"best_soc_keep is minimum battery level to try to keep above during the whole period of the simulation time, soft constraint only (use min for hard constraint). It's usually good to have this above 0 to allow some margin in case you use more energy than planned between charge slots. best_soc_min ( expert mode ) sets the minimum charge level (in kWh) for charging during each slot and the minimum discharge level also (set to 0 if you want to skip some slots). If you set this non-zero you will need to use the low rate threshold to control which slots you charge from or you may charge all the time. best_soc_max ( expert mode ) sets the maximum charge level (in kWh) for charging during each slot. A value of 0 disables this feature. combine_charge_slots Controls if charge slots of > 30 minutes can be combined. When disabled they will be split up, increasing run times but potentially more accurate for planning. Turn this off if you want to enable ad-hoc import during long periods of higher rates but you wouldn't charge normally in that period (e.g. pre-charge at day rate before a saving session). The default is enable (True) combine_discharge_slots ( expert mode ) Controls if discharge slots of > 30 minute can be combined. When disabled they will be split up, increasing run times but potentially more accurate for planning. The default is disabled (False) metric_min_improvement ( expert mode ) sets the minimum cost improvement that it's worth lowering the battery SOC % for. If it's 0 then this is disabled and the battery will be charged less if it's cost neutral. If you use pv_metric10_weight then you probably don't need to enable this as the 10% forecast does the same thing better Do not use if you have multiple charge windows in a given period as it won't lead to good results (e.g. Agile) You could even go to something like -0.1 to say you would charge less even if it cost up to 0.1p more (best used with metric10) metric_min_improvement_discharge ( expert mode ) Sets the minimum cost improvement it's worth discharging for. A value of 0.1 is the default which prevents any marginal discharges. If you increase this value then discharges will become less common and shorter. rate_low_threshold ( expert mode ) When 0 (default) this is automatic but can be overridden. When non zero it sets the threshold below average rates as the minimum to consider for a charge window, 0.8 = 80% of average rate If you set this too low you might not get enough charge slots. If it's too high you might get too many in the 24-hour period which makes optimisation harder. rate_high_threshold ( expert mode ) When 0 (default) this is automatic but can be overridden. When non zero it sets the threshold above average rates as to the minimum export rate to consider exporting for - 1.2 = 20% above average rate If you set this too high you might not get any export slots. If it's too low you might get too many in the 24-hour period. metric_future_rate_offset_import ( expert mode ) Sets an offset to apply to future import energy rates that are not yet published, best used for variable rate tariffs such as Agile import where the rates are not published until 4pm. If you set this to a positive value then Predbat will assume unpublished import rates are higher by the given amount. metric_future_rate_offset_export ( expert mode ) Sets an offset to apply to future export energy rates that are not yet published, best used for variable rate tariffs such as Agile export where the rates are not published until 4pm. If you set this to a negative value then Predbat will assume unpublished export rates are lower by the given amount. switch.predbat_calculate_inday_adjustment ( expert mode ) Enabled by default with damping of 0.95. When enabled will calculate the difference between today's actual load and today's predicated load and adjust the rest of the days usage prediction accordingly. A scale factor can be set with input_number.predbat_metric_inday_adjust_damping ( expert mode ) to either scale up or down the impact of the in-day adjustment (lower numbers scale down its impact). The in-day adjustment factor can be see in predbat.load_inday_adjustment and charted with the In Day Adjustment chart (template can be found in the charts template in Github).","title":"Battery margins and metrics options"},{"location":"customisation/#inverter-control-options","text":"set_status_notify Enables mobile notification about changes to the Predbat state (e.g. Charge, Discharge etc). On by default. set_inverter_notify Enables mobile notification about all changes to inverter registers (e.g. setting window, turning discharge on/off). Off by default. switch.predbat_set_charge_low_power Enables low power charging mode where the max charge rate will be limited to the lowest possible to meet the charge target. Only really effective for charge windows >30 minutes. Off by default. set_reserve_enable ( expert_mode ) When enabled the reserve setting is used to hold the battery charge level once it has been reached or to protect against discharging beyond the set limit. Enabled by default. set_charge_freeze ( expert mode ) When enabled will allow Predbat to hold the current battery level while drawing from the grid/solar as an alternative to charging. Enabled by default. set_discharge_freeze_only ( expert mode ) When enabled forced discharge is prevented, but discharge freeze can be used (if enabled) to export excess solar rather than charging the battery. This is useful with tariffs that pay you for solar exports but don't allow forced export (brown energy). If you have inverter_hybrid set to False then if inverter_soc_reset ( expert mode ) is set to True then the target SOC % will be reset to 100% outside a charge window. This may be required for AIO inverter to ensure it charges from solar. set_reserve_min Defines the reserve percentage to reset the reserve to when not in use, a value of 4 is the minimum and recommended to make use of the full battery inverter_soc_reset ( expert mode ) When enabled the target SOC for the inverter(s) will be reset to 100% when a charge slot is not active, this can be used to workaround some firmware issues where the SOC target is used for solar charging as well as grid charging. When disabled the SOC % will not be changed after a charge slot. This is disabled by default.","title":"Inverter control options"},{"location":"customisation/#iboost-model-options","text":"IBoost model, when enabled with iboost_enable tries to model excess solar energy being used to heat hot water (or similar). The predicted output from the IBoost model is returned in iboost_best . The following entities are only available when you turn on iboost enable: iboost_max_energy Sets the max energy sets the number of kwh that iBoost can consume during a day before turning off - default 3kWh iboost_max_power Sets the maximum power in watts to consume - default 2400 iboost_min_power Sets the minimum power in watts to consume - default 500 iboost_min_soc sets the minimum home battery soc % to enable iboost on, default 0 You will see predbat.iboost_today entity which tracks the estimated amount consumed during the day, and resets at night If you have an incrementing Sensor that tracks IBoost energy usage then you should set iboost_energy_today sensor in apps.yaml to point to it and optionally set iboost_energy_scaling if the sensor isn't in kWh.","title":"IBoost model options"},{"location":"customisation/#debug","text":"debug_enable when on prints lots of debug, leave off by default plan_debug ( expert mode ) when enabled adds some extra debug to the Predbat HTML plan","title":"Debug"},{"location":"developing/","text":"Developing on Predbat Creating a fork Using GitHub, take a fork of Predbat - effectively, this creates a copy of the main repository, but in your personal space. There, you can create branches to develop on. Pull requests Once you've completed your work on your branch, you can create a pull request (PR) to merge your work back in to the main branch of Predbat. This PR should describe the work you've done in a way that makes it easy for someone to review your work, and either add comments or approve it. Editing the code There are at least a couple of ways of working on the code, outlined here. Using GitHub Codespaces What is GitHub Codespaces? Especially if you don't need to have a running Home Assistant system to make the changes you're interested in (e.g. for documentation, quick fixes etc.) a really easy way to work on the code is using GitHub Codespaces. GitHub Codespaces gives you a full featured development environment. This includes: A full IDE (a code editor), Visual Studio Code, which can be: Run in the browser, requiring no additional software to be installed Run in a virtual machine (VM) running in the cloud which can connect to a copy of VS Code installed on your own machine A terminal where you can run commands against your codebase e.g. running pre-commit to run the automatic code quality checks, linting files, etc. Software like mkdocs to re-generate the documentation files (and other software we may include) pre-installed in it The Codespaces environment is entirely separate from your HA installation, so does not require any modification to your HA setup to work with it. However, you are modifying code in an environment where you can't see HA running, so it's great for things like updating documentation, or writing automated tests, but not if you need to see your changes live within HA. Running GitHub Codespaces You may with to first install VS Code on your machine, which does offer some benefits compared to running Codespaces in the cloud, but this is certainly not essential, and you'll see the same code editor and terminal, and you'll have the same commands and Python packages available in the terminal. The local installation is better in a small number of scenarios e.g. if you need to connect from your browser to a specific port on the VM, such as if you're working on the documentation. Importantly, even if you do a local install of VS Code and use that to edit your code within GitHub, the terminal, the code you're editing any commands that you run, and any processes like mkdocs that you may browse to are all running in the Codespaces VM. Your local VS Code is connected to the VM through SSH. It will appear as if the code, the terminal etc. are local, but they are not. Running a local VS Code install connected to Codespaces will not install Python, Python packages or anything else on your local machine. Now, from your fork or branch, click on the Code button, and select the Codespaces tab. You can create multiple environments, or use a single environment and swap between branches in it. Once you start your Codespaces environment, it'll take a minute to create a VM for you, and to install the software we've asked it to install in there. It will also clone your repository and chosen branch into it for you, and the VM will be authenticated with GitHub so you can commit and push straight back to your fork of Predbat on GitHub. You can choose between running the IDE in the browser, or having your local installation of VS Code connect to the environment that GitHub Codespaces has created for you. The Codespaces will be already set up with Python, along with various Python packages (as defined in requirements.txt ). The environment is configured through the config in .devcontainer/devcontainer.json . Developing locally within Home Assistant To be documented later. Working on the documentation Overview of the Predbat documentation The documentation site at https://springfall2008.github.io/batpred/ is built from Markdown files in this repo. The Markdown files used to build the documentation are in the docs/ folder, with additional config for building the documentation site in mkdocs.yml . If you're making minor changes to the documentation e.g. fixing a spelling, you can just edit the Markdown files directly, and it will be pushed to the main documentation site as outlined in the documentation build process section below, once your changes are merged into main and released. However, if you're doing more than that, e.g. adding new sections, working with lists etc. we recommend you follow the instructions in working locally on the documentation below, as this will give you a live preview of what the documentation will look like once it's build and published. This will avoid any unexpected results appearing in the main documentation site. If you are adding a new file, please ensure you add that file to mkdocs.yml , so it will be linked from the menu in the sidebar. The documentation build process The documentation for the site is built using mkdocs , which will already be installed if you're using a GitHub Codespaces environment. For a detailed explanation of mkdocs features, please read the mkdocs documentation . As briefly covered above, mkdocs.yml contains the config for defining the documentation site, and the documentation is built by mkdocs reading the Markdown files in the docs/ folder, and creating HTML files from those files. mkdocs can be used locally for previewing, but is also used as part of the documentation build process that publishes the official documentation site. The publishing of the documentation is triggered by a GitHub action, as defined in .github/workflows/main.yml . In short, after configuring the build environment, mkdocs builds the site, then pushes the HTML produced to the gh-pages branch, overwriting whatever was there previously. GitHub will then detect a new commit on the gh-pages branch, and that will trigger another action to run (as defined by GitHub). This action will take the HTML files on the gh-pages branch, and will make it available at https://springfall2008.github.io/batpred/ . The documentation will be published as it is, with no further review process, so please ensure you check the documentation that will be built before merging it in. Working locally on the documentation If you are making changes to the documentation, you can see a live preview version of the documentation as it will be built and deployed. This preview version is local to your environment, is temporary, and does not impact the published version in any way. It's recommended for anything other than simple changes like fixing spellings, adding a sentence or two. Things like new sections, lists, new pages etc. are best previewed due to the complications of various Markdown standards, as what works on GitHub READMEs, for example, does not necessarily work with the published documentation site (which follows a more strict Markdown standard). There are a number of terminal commands that you can use in the Codespaces environment. Open a terminal window in Codespaces by choosing menu > Terminal > New Terminal. To run the live preview, enter mkdocs serve in the terminal window - this will cause mkdocs to build a local temporary version of the documentation site, and to temporarily publish it on port 8000 - it will show the link where you can access the documentation. Also, it will watch the docs/ folder, and any time you change the files, it will rebuild the site, allowing you to see changes to the Markdown files in your browser within a few seconds. The site will continue being served until you press CTRL-C to end the mkdocs serve command. Note, accessing the site published by mkdocs serve is not possible if you are using Codespaces to run VS Code in the browser, but it is possible if you're using it via VS Code running locally, due to the way in which ports on your environment are shared. Coding standards Expected standards This section will be enhanced following discussions as we go. However, here's a starting point: Variable names should be lower_case_with_underscores - this fits with most existing variables, is a common standard for Python code, and also allows the spell checking to check individual words within the variable name. Enforced standards Certain coding standards are enforced within the repository. Some of them can be auto-fixed, if you do a commit that fails one of those standards; other issues will need fixing first, as your pull request won't merge in GitHub until it passes. These standards are enforced by pre-commit , a tool which is able to run other tools to check, and potentially fix (for certain types of issues) any mistakes you've made. The .pre-commit-config.yaml file lists all checks that are currently carried out within the repository. Bear in mind that these checks are done according to the config within that file in the branch that you are working in, so if someone adds a new check, or changes some of the related settings, it won't apply on your branch until you've merged in their changes. Some of the tools have their own related config files: CSpell - .cspell.json and .cspell/custom-dictionary-workspace.txt Black - pyproject.toml Markdown Lint - .markdownlint.jsonc Additional notes on some of the standards: CSpell - if you have the spelling check failing due to a word which is valid but is not in the in-built dictionary, please add that word to the end of .cspell/custom-dictionary-workspace.txt and stage those changes. The spell-check should then pass. Note, the dictionary file will get re-sorted alphabetically when you run pre-commit , so you'll need to re-stage the file after it's been sorted. Running the checks locally If you are using a Codespaces environment, you'll already have pre-commit installed automatically. You can run it manually, or automatically. Running pre-commit manually: In a terminal window, running pre-commit will run all the checks against any files that you have modified and staged. Alternatively, running pre-commit run --all-files will run all the checks against all files within the repository. Note that if pre-commit makes any changes to any files when it runs, those changes will not be staged. You will need to stage those changes too before committing. You may notice pre-commit mentioning about stashing changes - this is because when it runs, any changes that aren't staged are stashed (saved away temporarily) so it runs against only the staged changes; after it has run, it pulls back those stashed changes, so they appear again (still unstaged). Running pre-commit automatically: If you run pre-commit install in a terminal window it will install a pre-commit hook - this is a file which tells git to run some code each type you do a particular action (a pre-commit hook runs at the start of processing a commit, but there are other hooks e.g. pre-push). Now, any time you perform a commit, pre-commit will run automatically on the staged files - this is a handy way of making sure that you don't accidentally commit code which will fail checks later. You can still run it manually as outlined above, in addition to the automated checks that it will do on commits. Running the checks from within GitHub When commits are done on pull requests, and in any other scenarios added to the on section of .github/workflows/linting.yml , the GitHub Actions in that file will run. In particular, the pre-commit.ci lite action will run. This uses the code here to run the same checks that get run locally (as described in the .pre-commit-config.yaml file). This will cause your commit, branch or pull request to get either a green tick or a red cross against it, to show whether the code passed the checks or not. This will happen automatically, when you push code on a branch that has a pull request. In addition, if pre-commit finds any errors that it is able to fix (e.g. a missing blank line at the end of a file, or trailing whitespace), it will do a commit of its own to fix those problems, and will push that commit back to your branch on GitHub. This will then trigger another run, which should now pass. Note : This means that pre-commit will be adding commits to your branch - this will need you to be pulling changes from GitHub so you pick up the changes that have been added by pre-commit otherwise you will hit a problem when you next try to push a commit on your branch. You can pull in those changes by running git pull , which is the equivalent of running git fetch then git merge . This is no different to working on the same branch with another developer, but it will be different to the workflow most of us have when working on Predbat.","title":"Developing on Predbat"},{"location":"developing/#developing-on-predbat","text":"","title":"Developing on Predbat"},{"location":"developing/#creating-a-fork","text":"Using GitHub, take a fork of Predbat - effectively, this creates a copy of the main repository, but in your personal space. There, you can create branches to develop on.","title":"Creating a fork"},{"location":"developing/#pull-requests","text":"Once you've completed your work on your branch, you can create a pull request (PR) to merge your work back in to the main branch of Predbat. This PR should describe the work you've done in a way that makes it easy for someone to review your work, and either add comments or approve it.","title":"Pull requests"},{"location":"developing/#editing-the-code","text":"There are at least a couple of ways of working on the code, outlined here.","title":"Editing the code"},{"location":"developing/#using-github-codespaces","text":"","title":"Using GitHub Codespaces"},{"location":"developing/#what-is-github-codespaces","text":"Especially if you don't need to have a running Home Assistant system to make the changes you're interested in (e.g. for documentation, quick fixes etc.) a really easy way to work on the code is using GitHub Codespaces. GitHub Codespaces gives you a full featured development environment. This includes: A full IDE (a code editor), Visual Studio Code, which can be: Run in the browser, requiring no additional software to be installed Run in a virtual machine (VM) running in the cloud which can connect to a copy of VS Code installed on your own machine A terminal where you can run commands against your codebase e.g. running pre-commit to run the automatic code quality checks, linting files, etc. Software like mkdocs to re-generate the documentation files (and other software we may include) pre-installed in it The Codespaces environment is entirely separate from your HA installation, so does not require any modification to your HA setup to work with it. However, you are modifying code in an environment where you can't see HA running, so it's great for things like updating documentation, or writing automated tests, but not if you need to see your changes live within HA.","title":"What is GitHub Codespaces?"},{"location":"developing/#running-github-codespaces","text":"You may with to first install VS Code on your machine, which does offer some benefits compared to running Codespaces in the cloud, but this is certainly not essential, and you'll see the same code editor and terminal, and you'll have the same commands and Python packages available in the terminal. The local installation is better in a small number of scenarios e.g. if you need to connect from your browser to a specific port on the VM, such as if you're working on the documentation. Importantly, even if you do a local install of VS Code and use that to edit your code within GitHub, the terminal, the code you're editing any commands that you run, and any processes like mkdocs that you may browse to are all running in the Codespaces VM. Your local VS Code is connected to the VM through SSH. It will appear as if the code, the terminal etc. are local, but they are not. Running a local VS Code install connected to Codespaces will not install Python, Python packages or anything else on your local machine. Now, from your fork or branch, click on the Code button, and select the Codespaces tab. You can create multiple environments, or use a single environment and swap between branches in it. Once you start your Codespaces environment, it'll take a minute to create a VM for you, and to install the software we've asked it to install in there. It will also clone your repository and chosen branch into it for you, and the VM will be authenticated with GitHub so you can commit and push straight back to your fork of Predbat on GitHub. You can choose between running the IDE in the browser, or having your local installation of VS Code connect to the environment that GitHub Codespaces has created for you. The Codespaces will be already set up with Python, along with various Python packages (as defined in requirements.txt ). The environment is configured through the config in .devcontainer/devcontainer.json .","title":"Running GitHub Codespaces"},{"location":"developing/#developing-locally-within-home-assistant","text":"To be documented later.","title":"Developing locally within Home Assistant"},{"location":"developing/#working-on-the-documentation","text":"","title":"Working on the documentation"},{"location":"developing/#overview-of-the-predbat-documentation","text":"The documentation site at https://springfall2008.github.io/batpred/ is built from Markdown files in this repo. The Markdown files used to build the documentation are in the docs/ folder, with additional config for building the documentation site in mkdocs.yml . If you're making minor changes to the documentation e.g. fixing a spelling, you can just edit the Markdown files directly, and it will be pushed to the main documentation site as outlined in the documentation build process section below, once your changes are merged into main and released. However, if you're doing more than that, e.g. adding new sections, working with lists etc. we recommend you follow the instructions in working locally on the documentation below, as this will give you a live preview of what the documentation will look like once it's build and published. This will avoid any unexpected results appearing in the main documentation site. If you are adding a new file, please ensure you add that file to mkdocs.yml , so it will be linked from the menu in the sidebar.","title":"Overview of the Predbat documentation"},{"location":"developing/#the-documentation-build-process","text":"The documentation for the site is built using mkdocs , which will already be installed if you're using a GitHub Codespaces environment. For a detailed explanation of mkdocs features, please read the mkdocs documentation . As briefly covered above, mkdocs.yml contains the config for defining the documentation site, and the documentation is built by mkdocs reading the Markdown files in the docs/ folder, and creating HTML files from those files. mkdocs can be used locally for previewing, but is also used as part of the documentation build process that publishes the official documentation site. The publishing of the documentation is triggered by a GitHub action, as defined in .github/workflows/main.yml . In short, after configuring the build environment, mkdocs builds the site, then pushes the HTML produced to the gh-pages branch, overwriting whatever was there previously. GitHub will then detect a new commit on the gh-pages branch, and that will trigger another action to run (as defined by GitHub). This action will take the HTML files on the gh-pages branch, and will make it available at https://springfall2008.github.io/batpred/ . The documentation will be published as it is, with no further review process, so please ensure you check the documentation that will be built before merging it in.","title":"The documentation build process"},{"location":"developing/#working-locally-on-the-documentation","text":"If you are making changes to the documentation, you can see a live preview version of the documentation as it will be built and deployed. This preview version is local to your environment, is temporary, and does not impact the published version in any way. It's recommended for anything other than simple changes like fixing spellings, adding a sentence or two. Things like new sections, lists, new pages etc. are best previewed due to the complications of various Markdown standards, as what works on GitHub READMEs, for example, does not necessarily work with the published documentation site (which follows a more strict Markdown standard). There are a number of terminal commands that you can use in the Codespaces environment. Open a terminal window in Codespaces by choosing menu > Terminal > New Terminal. To run the live preview, enter mkdocs serve in the terminal window - this will cause mkdocs to build a local temporary version of the documentation site, and to temporarily publish it on port 8000 - it will show the link where you can access the documentation. Also, it will watch the docs/ folder, and any time you change the files, it will rebuild the site, allowing you to see changes to the Markdown files in your browser within a few seconds. The site will continue being served until you press CTRL-C to end the mkdocs serve command. Note, accessing the site published by mkdocs serve is not possible if you are using Codespaces to run VS Code in the browser, but it is possible if you're using it via VS Code running locally, due to the way in which ports on your environment are shared.","title":"Working locally on the documentation"},{"location":"developing/#coding-standards","text":"","title":"Coding standards"},{"location":"developing/#expected-standards","text":"This section will be enhanced following discussions as we go. However, here's a starting point: Variable names should be lower_case_with_underscores - this fits with most existing variables, is a common standard for Python code, and also allows the spell checking to check individual words within the variable name.","title":"Expected standards"},{"location":"developing/#enforced-standards","text":"Certain coding standards are enforced within the repository. Some of them can be auto-fixed, if you do a commit that fails one of those standards; other issues will need fixing first, as your pull request won't merge in GitHub until it passes. These standards are enforced by pre-commit , a tool which is able to run other tools to check, and potentially fix (for certain types of issues) any mistakes you've made. The .pre-commit-config.yaml file lists all checks that are currently carried out within the repository. Bear in mind that these checks are done according to the config within that file in the branch that you are working in, so if someone adds a new check, or changes some of the related settings, it won't apply on your branch until you've merged in their changes. Some of the tools have their own related config files: CSpell - .cspell.json and .cspell/custom-dictionary-workspace.txt Black - pyproject.toml Markdown Lint - .markdownlint.jsonc Additional notes on some of the standards: CSpell - if you have the spelling check failing due to a word which is valid but is not in the in-built dictionary, please add that word to the end of .cspell/custom-dictionary-workspace.txt and stage those changes. The spell-check should then pass. Note, the dictionary file will get re-sorted alphabetically when you run pre-commit , so you'll need to re-stage the file after it's been sorted.","title":"Enforced standards"},{"location":"developing/#running-the-checks-locally","text":"If you are using a Codespaces environment, you'll already have pre-commit installed automatically. You can run it manually, or automatically. Running pre-commit manually: In a terminal window, running pre-commit will run all the checks against any files that you have modified and staged. Alternatively, running pre-commit run --all-files will run all the checks against all files within the repository. Note that if pre-commit makes any changes to any files when it runs, those changes will not be staged. You will need to stage those changes too before committing. You may notice pre-commit mentioning about stashing changes - this is because when it runs, any changes that aren't staged are stashed (saved away temporarily) so it runs against only the staged changes; after it has run, it pulls back those stashed changes, so they appear again (still unstaged). Running pre-commit automatically: If you run pre-commit install in a terminal window it will install a pre-commit hook - this is a file which tells git to run some code each type you do a particular action (a pre-commit hook runs at the start of processing a commit, but there are other hooks e.g. pre-push). Now, any time you perform a commit, pre-commit will run automatically on the staged files - this is a handy way of making sure that you don't accidentally commit code which will fail checks later. You can still run it manually as outlined above, in addition to the automated checks that it will do on commits.","title":"Running the checks locally"},{"location":"developing/#running-the-checks-from-within-github","text":"When commits are done on pull requests, and in any other scenarios added to the on section of .github/workflows/linting.yml , the GitHub Actions in that file will run. In particular, the pre-commit.ci lite action will run. This uses the code here to run the same checks that get run locally (as described in the .pre-commit-config.yaml file). This will cause your commit, branch or pull request to get either a green tick or a red cross against it, to show whether the code passed the checks or not. This will happen automatically, when you push code on a branch that has a pull request. In addition, if pre-commit finds any errors that it is able to fix (e.g. a missing blank line at the end of a file, or trailing whitespace), it will do a commit of its own to fix those problems, and will push that commit back to your branch on GitHub. This will then trigger another run, which should now pass. Note : This means that pre-commit will be adding commits to your branch - this will need you to be pulling changes from GitHub so you pick up the changes that have been added by pre-commit otherwise you will hit a problem when you next try to push a commit on your branch. You can pull in those changes by running git pull , which is the equivalent of running git fetch then git merge . This is no different to working on the same branch with another developer, but it will be different to the workflow most of us have when working on Predbat.","title":"Running the checks from within GitHub"},{"location":"energy-rates/","text":"Energy rates Octopus Energy Plugin If you want to use real pricing data and have Octopus Energy then ensure you have the Octopus Energy plugin installed and working ( https://github.com/BottlecapDave/HomeAssistant-OctopusEnergy ) The Octopus Energy Plugin also provides support for Intelligent Octopus charging to support car charging. When octopus_intelligent_charging is True and you are on Intelligent Octopus import the car charging plan will be extracted from Octopus and used for Predbat to plan, and it may charge the home battery using these slots also. CAUTION To get detailed energy rates needed by Predbat you need to go into Home Assistant and manually enable the following events which are disabled by the plugin by default in some versions: event.octopus_energy_electricity_xxxxxxxx_previous_day_rates event.octopus_energy_electricity_xxxxxxxx_current_day_rates event.octopus_energy_electricity_xxxxxxxx_next_day_rates event.octopus_energy_electricity_xxxxxxxx_export_previous_day_rates event.octopus_energy_electricity_xxxxxxxx_export_current_day_rates event.octopus_energy_electricity_xxxxxxxx_export_next_day_rates Octopus Saving sessions For Predbat to automatically manage saving sessions you will need to make sure that octopus_saving_session is set in apps.yaml to point to the saving session binary sensor supported by the Octopus Energy plugin (see template apps.yaml for the default name). When a saving session is available it will be automatically joined by Predbat and then should appear as a joined session within the next 30 minutes. When a saving session has been joined the energy rates for import and export will be overridden by adding the assumed saving rate to your normal rate. The assumed rate will be taken from the Octopus Energy add-in (v9.1.0 and above) and converted into pence using the octopus_saving_session_octopoints_per_penny configuration item in apps.yaml (default is 8). As the saving session import and export rates are very high compared to normal you would expect Predbat to export during the entire period if the battery is large amount, a pre-charge may happen at some point during the day to maintain the right level for the session. If you are using expert mode, for best results: switch.predbat_combine_charge_slots ( expert mode ) should be turned off. Set input_number.rate_low_threshold ( expert mode ) and input_number.rate_high_threshold ( expert mode ) to 0 for automatic mode. For forced export you need to ensure that switch.predbat_calculate_best_discharge is enabled and that switch.predbat_set_discharge_freeze_only is disabled. If you do not have an export tariff then forced export will not apply. Rate bands You can manually configure your rate bands (assuming they repeat) using rates_import/rates_export (see below). Rate offsets Note that you can tune future unknown energy rates by adjusting input_number.predbat_metric_future_rate_offset_import ( expert mode ) and input_number.predbat_metric_future_rate_offset_export ( expert mode ) inside Home Assistant to set the predicted offset for future unknown rates. Future Agile energy rates In the energy market it's possible to calculate the Octopus Agile rates from around 10am UK time using public data, you can enable this in apps.yaml for Import, Export or both. This will approximate next day's rates based on the spot prices. The approximation is only used until the real Octopus Agile rates are released around 4pm. CAUTION: You may violate the terms and conditions of the Nordpool site if you use this data and as such the authors of Predbat accept no responsibility for any violations: https://www.nordpoolgroup.com/en/About-us/terms-and-conditions-for-useofwebsite/ Nordpool market energy rates futurerate_url: '<https://www.nordpoolgroup.com/api/marketdata/page/325?currency=GBP>' futurerate_adjust_import: True futurerate_adjust_export: True futurerate_peak_start: \"16:00:00\" futurerate_peak_end: \"19:00:00\" futurerate_peak_premium_import: 14 futurerate_peak_premium_export: 6.5","title":"Energy rates"},{"location":"energy-rates/#energy-rates","text":"","title":"Energy rates"},{"location":"energy-rates/#octopus-energy-plugin","text":"If you want to use real pricing data and have Octopus Energy then ensure you have the Octopus Energy plugin installed and working ( https://github.com/BottlecapDave/HomeAssistant-OctopusEnergy ) The Octopus Energy Plugin also provides support for Intelligent Octopus charging to support car charging. When octopus_intelligent_charging is True and you are on Intelligent Octopus import the car charging plan will be extracted from Octopus and used for Predbat to plan, and it may charge the home battery using these slots also. CAUTION To get detailed energy rates needed by Predbat you need to go into Home Assistant and manually enable the following events which are disabled by the plugin by default in some versions: event.octopus_energy_electricity_xxxxxxxx_previous_day_rates event.octopus_energy_electricity_xxxxxxxx_current_day_rates event.octopus_energy_electricity_xxxxxxxx_next_day_rates event.octopus_energy_electricity_xxxxxxxx_export_previous_day_rates event.octopus_energy_electricity_xxxxxxxx_export_current_day_rates event.octopus_energy_electricity_xxxxxxxx_export_next_day_rates","title":"Octopus Energy Plugin"},{"location":"energy-rates/#octopus-saving-sessions","text":"For Predbat to automatically manage saving sessions you will need to make sure that octopus_saving_session is set in apps.yaml to point to the saving session binary sensor supported by the Octopus Energy plugin (see template apps.yaml for the default name). When a saving session is available it will be automatically joined by Predbat and then should appear as a joined session within the next 30 minutes. When a saving session has been joined the energy rates for import and export will be overridden by adding the assumed saving rate to your normal rate. The assumed rate will be taken from the Octopus Energy add-in (v9.1.0 and above) and converted into pence using the octopus_saving_session_octopoints_per_penny configuration item in apps.yaml (default is 8). As the saving session import and export rates are very high compared to normal you would expect Predbat to export during the entire period if the battery is large amount, a pre-charge may happen at some point during the day to maintain the right level for the session. If you are using expert mode, for best results: switch.predbat_combine_charge_slots ( expert mode ) should be turned off. Set input_number.rate_low_threshold ( expert mode ) and input_number.rate_high_threshold ( expert mode ) to 0 for automatic mode. For forced export you need to ensure that switch.predbat_calculate_best_discharge is enabled and that switch.predbat_set_discharge_freeze_only is disabled. If you do not have an export tariff then forced export will not apply.","title":"Octopus Saving sessions"},{"location":"energy-rates/#rate-bands","text":"You can manually configure your rate bands (assuming they repeat) using rates_import/rates_export (see below).","title":"Rate bands"},{"location":"energy-rates/#rate-offsets","text":"Note that you can tune future unknown energy rates by adjusting input_number.predbat_metric_future_rate_offset_import ( expert mode ) and input_number.predbat_metric_future_rate_offset_export ( expert mode ) inside Home Assistant to set the predicted offset for future unknown rates.","title":"Rate offsets"},{"location":"energy-rates/#future-agile-energy-rates","text":"In the energy market it's possible to calculate the Octopus Agile rates from around 10am UK time using public data, you can enable this in apps.yaml for Import, Export or both. This will approximate next day's rates based on the spot prices. The approximation is only used until the real Octopus Agile rates are released around 4pm. CAUTION: You may violate the terms and conditions of the Nordpool site if you use this data and as such the authors of Predbat accept no responsibility for any violations: https://www.nordpoolgroup.com/en/About-us/terms-and-conditions-for-useofwebsite/","title":"Future Agile energy rates"},{"location":"energy-rates/#nordpool-market-energy-rates","text":"futurerate_url: '<https://www.nordpoolgroup.com/api/marketdata/page/325?currency=GBP>' futurerate_adjust_import: True futurerate_adjust_export: True futurerate_peak_start: \"16:00:00\" futurerate_peak_end: \"19:00:00\" futurerate_peak_premium_import: 14 futurerate_peak_premium_export: 6.5","title":"Nordpool market energy rates"},{"location":"faq/","text":"FAQ I've installed Predbat but I don't see the correct entities First look at predbat.status in Home Assistant and the AppDaemon.log (which can be found in the list of log files in the System/Log area of the GUI). See if any errors are warnings are found. If you see an error it's likely something is configured wrongly, check your entity settings are correct. Make sure Solcast is installed and it's auto-updated at least a couple of times a day (see the Solcast instructions). The default solcast sensor names maybe wrong, you might need to update the apps.yml config to match your own names (some people don't have the solcast_ bit in their names) Did you configure AppDaemon apps_dir correctly in appdaemon.yaml? Why is my predicted charge % higher or lower than I might expect? Predbat is based on costing, so it will try to save you money. If you have the PV 10% option enabled it will also take into account the more worse case scenario and how often it might happen, so if the forecast is a bit unreliable it's better to charge more and not risk getting stung importing. Have you checked your energy rates for import and export are correct, maybe check the rates graph and confirm. If you do something like have export>import then Predbat will try to export as much as possible. Have you tuned Solcast to match your output accurately? Have you tuned best_soc_keep settings Do you have predicted car charging during the time period? You can also tune load_scaling and pv_scaling to adjust predictions up and down a bit Maybe your historical data includes car charging, you might want to filter this out using car_charging_hold (see below) Why didn't the slot actually get configured? Are you in read-only mode? Do you have the predbat_mode set to Control Charge (or Charge & Discharge)? The charge limit keeps increasing/decreasing in the charge window or is unstable Check you don't have any other automations running that adjust GivTCP settings during this time. Some people had a script that changes the reserve %, this will cause problems - please disable other automations and retry. I changed a config item but it made no difference? You might have to wait a few minutes until the next update cycle It's all running but I'm not getting very good results You might want to tune best_soc_keep to set a minimum target battery level, e.g. I use 2.0 (for 2kWh, which is just over 20% on a 9.5kWh battery). If you set best_soc_keep too high then predbat could need to charge the battery in unfavourable import rates, so try to set it to a fairly low value, especially if you have a small battery. If you set it to zero then predbat may not charge at all, so use 0.1 as a minimum. Have a read of the energy rates configuration guide as depending on your tariff different settings maybe required Check your solar production is well calibrated (you can compare solcast vs actually in the Home Assistant energy tab or on the GivEnergy portal) Make sure your inverter max AC rate has been set correctly If you have an EV that you charge then you will want some sort of car charging sensor or use the basic car charging hold feature or your load predictions maybe unreliable Do you have a solar diverter? If so maybe you want to try using the IBoost model settings. Perhaps set up the calibration chart and let it run for 24 hours to see how things line up If your export slots are too small compared to expected check your inverter_limit is set correctly (see below) Predbat is causing warning messages in the Home Assistant Core log If you have a large input_number.predbat_forecast_plan_hours then you may see warning messages in the Home Assistant Core log about the size of the predbat.plan_html entity. This is just a warning, the entity isn't stored in the database, but you can suppress it by adding the following to your configuration.yaml: # Filter out 'message too large' warnings from Predbat logger: default: warning filters: homeassistant.components.recorder.db_schema: - \"State attributes for predbat.plan_html exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\" Error - metric_octopus_import not set correctly or no energy rates can be read Check that the Octopus integration is working and that event.octopus_energy_ _current_day_rates and sensor.octopus_energy_ _current_rate are both populated by the integration. Ensure that you have followed the Octopus Integration Installation instructions , including enabling the Octopus Integration events. If your sensors are named sensor.electricity_ _current_rate (i.e. no 'octopus_energy_' prefix) then uninstall the Octopus integration, reboot Home Assistant, delete the old Octopus sensors, and re-install the Octopus integration as predbat will not be able to find the event names if the sensor names don't match what's expected. I have another problem not listed above If you are still having trouble feel free to raise a Github ticket for support","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#ive-installed-predbat-but-i-dont-see-the-correct-entities","text":"First look at predbat.status in Home Assistant and the AppDaemon.log (which can be found in the list of log files in the System/Log area of the GUI). See if any errors are warnings are found. If you see an error it's likely something is configured wrongly, check your entity settings are correct. Make sure Solcast is installed and it's auto-updated at least a couple of times a day (see the Solcast instructions). The default solcast sensor names maybe wrong, you might need to update the apps.yml config to match your own names (some people don't have the solcast_ bit in their names) Did you configure AppDaemon apps_dir correctly in appdaemon.yaml?","title":"I've installed Predbat but I don't see the correct entities"},{"location":"faq/#why-is-my-predicted-charge-higher-or-lower-than-i-might-expect","text":"Predbat is based on costing, so it will try to save you money. If you have the PV 10% option enabled it will also take into account the more worse case scenario and how often it might happen, so if the forecast is a bit unreliable it's better to charge more and not risk getting stung importing. Have you checked your energy rates for import and export are correct, maybe check the rates graph and confirm. If you do something like have export>import then Predbat will try to export as much as possible. Have you tuned Solcast to match your output accurately? Have you tuned best_soc_keep settings Do you have predicted car charging during the time period? You can also tune load_scaling and pv_scaling to adjust predictions up and down a bit Maybe your historical data includes car charging, you might want to filter this out using car_charging_hold (see below)","title":"Why is my predicted charge % higher or lower than I might expect?"},{"location":"faq/#why-didnt-the-slot-actually-get-configured","text":"Are you in read-only mode? Do you have the predbat_mode set to Control Charge (or Charge & Discharge)?","title":"Why didn't the slot actually get configured?"},{"location":"faq/#the-charge-limit-keeps-increasingdecreasing-in-the-charge-window-or-is-unstable","text":"Check you don't have any other automations running that adjust GivTCP settings during this time. Some people had a script that changes the reserve %, this will cause problems - please disable other automations and retry.","title":"The charge limit keeps increasing/decreasing in the charge window or is unstable"},{"location":"faq/#i-changed-a-config-item-but-it-made-no-difference","text":"You might have to wait a few minutes until the next update cycle","title":"I changed a config item but it made no difference?"},{"location":"faq/#its-all-running-but-im-not-getting-very-good-results","text":"You might want to tune best_soc_keep to set a minimum target battery level, e.g. I use 2.0 (for 2kWh, which is just over 20% on a 9.5kWh battery). If you set best_soc_keep too high then predbat could need to charge the battery in unfavourable import rates, so try to set it to a fairly low value, especially if you have a small battery. If you set it to zero then predbat may not charge at all, so use 0.1 as a minimum. Have a read of the energy rates configuration guide as depending on your tariff different settings maybe required Check your solar production is well calibrated (you can compare solcast vs actually in the Home Assistant energy tab or on the GivEnergy portal) Make sure your inverter max AC rate has been set correctly If you have an EV that you charge then you will want some sort of car charging sensor or use the basic car charging hold feature or your load predictions maybe unreliable Do you have a solar diverter? If so maybe you want to try using the IBoost model settings. Perhaps set up the calibration chart and let it run for 24 hours to see how things line up If your export slots are too small compared to expected check your inverter_limit is set correctly (see below)","title":"It's all running but I'm not getting very good results"},{"location":"faq/#predbat-is-causing-warning-messages-in-the-home-assistant-core-log","text":"If you have a large input_number.predbat_forecast_plan_hours then you may see warning messages in the Home Assistant Core log about the size of the predbat.plan_html entity. This is just a warning, the entity isn't stored in the database, but you can suppress it by adding the following to your configuration.yaml: # Filter out 'message too large' warnings from Predbat logger: default: warning filters: homeassistant.components.recorder.db_schema: - \"State attributes for predbat.plan_html exceed maximum size of 16384 bytes. This can cause database performance issues; Attributes will not be stored\"","title":"Predbat is causing warning messages in the Home Assistant Core log"},{"location":"faq/#error-metric_octopus_import-not-set-correctly-or-no-energy-rates-can-be-read","text":"Check that the Octopus integration is working and that event.octopus_energy_ _current_day_rates and sensor.octopus_energy_ _current_rate are both populated by the integration. Ensure that you have followed the Octopus Integration Installation instructions , including enabling the Octopus Integration events. If your sensors are named sensor.electricity_ _current_rate (i.e. no 'octopus_energy_' prefix) then uninstall the Octopus integration, reboot Home Assistant, delete the old Octopus sensors, and re-install the Octopus integration as predbat will not be able to find the event names if the sensor names don't match what's expected.","title":"Error - metric_octopus_import not set correctly or no energy rates can be read"},{"location":"faq/#i-have-another-problem-not-listed-above","text":"If you are still having trouble feel free to raise a Github ticket for support","title":"I have another problem not listed above"},{"location":"install/","text":"Install Inverter Control Integration install (GivTCP/SolaX-ModBus) The Integration that communicates with your inverter will be depend on the brand: Brand Integration Github Link GivEnergy GivTCP https://github.com/britkat1980/giv_tcp Solis SolaX ModBus https://github.com/wills106/homeassistant-solax-modbus You will need at least 24 hours history in HA for this to work correctly, the default is 7 days (but you configure this back 1 day if you need to) AppDaemon install Install the AppDaemon add-on https://github.com/hassio-addons/addon-appdaemon You will find the appdaemon.yaml file in addon_configs/a0d7b954_appdaemon If using the File Editor remember to turn off enforce base path to allow access: Add to the appdaemon: section apps_dir which should point to /homeassistant/appdaemon/apps Set the time_zone correctly in appdaemon.yaml (e.g. Europe/London) Add thread_duration_warning_threshold: 120 to the appdaemon.yaml file in the appdaemon section It's recommended you set a new logfile location so that you can see the complete logs, I set mine to /homeassistant/appdaemon/appdaemon.log and increase the maximum size and number of generations to capture a few days worth Example config: appdaemon: latitude: 52.379189 longitude: 4.899431 elevation: 2 time_zone: Europe/London thread_duration_warning_threshold: 120 plugins: HASS: type: hass app_dir: /homeassistant/appdaemon/apps http: url: http://homeassistant.local:5050 admin: api: hadashboard: logs: main_log: filename: /homeassistant/appdaemon/appdaemon.log log_generations: 9 log_size: 10000000 CAUTION: Migrating from an older Appdaemon to 0.15.2 or above: Make sure you have access to the HA filesystem, e.g. I use the Samba add on and connect to the drives on my Mac, but you can use ssh also. Update AppDaemon to 0.15.2 Go into addon_configs/a0d7b954_appdaemon and edit appdaemon.yaml. You need to add app_dir (see above) to point to the old location and update your logfile location (if you have set it). You should remove the line that points to secrets.yaml (most people don't use this file) or adjust it's path to the new location (/homeassistant/secrets.yaml). Move the entire 'apps' directory from addon_configs/a0d7b954_appdaemon (new location) to config/appdaemon (the old location) Restart appdaemon Check it has started and confirm Predbat is running correctly again. HACS install Install HACS if you haven't already ( https://hacs.xyz/docs/setup/download ) Enable AppDaemon in HACS: https://hacs.xyz/docs/categories/appdaemon_apps/ Predbat install Once installed you will get automatic updates from each release! Add https://github.com/springfall2008/batpred as a custom repository of type 'AppDaemon' Click on the Repo and Download the app After an update with HACS you may need to reboot AppDaemon as it sometimes reads the config wrongly during the update (If this happens you will get a template configuration error in the entity predbat.status). Edit in HomeAssistant config/appdaemon/apps/batpred/config/apps.yaml to configure Predbat - see Configuring apps.yaml . You must delete the 'template: True' line in the configuration to enable Predbat once you are happy with your configuration. You may initially want to set select.predbat_mode to Monitor to see how Predbat operates, to enable Predbat controls you should then set it to the correct mode of operation for your system. Note that future updates to Predbat will not overwrite apps.yaml, but you may need to copy settings for new features across manually When Predbat starts up initially it will perform a sanity check of the appDaemon configuration itself and confirm the right files are present. You will see this check in the log, should it fail a warning will be issued and predbat.status will also reflect the warning. While the above warning might not prevent Predbat from startup you should fix the issue ASAP as it may cause future problems. Predbat manual install Note: Not recommended if you have HACS Copy apps/predbat/predbat.py to 'config/appdaemon/apps/' directory in home assistant Copy apps/predbat/apps.yml to 'config/appdaemon/apps' directory in home assistant Edit in HomeAssistant config/appdaemon/apps/apps.yml to configure If you later install with HACS then you must move the apps.yml into config/appdaemon/apps/predbat/config Solcast install Predbat needs a solar forecast in order to predict battery levels. If you don't have solar then comment out the Solar forecast part of the apps.yml: pv_forecast_today: re:(sensor.(solcast_|)(pv_forecast_|)forecast_today) pv_forecast_tomorrow: re:(sensor.(solcast_|)(pv_forecast_|)forecast_tomorrow) pv_forecast_d3: re:(sensor.(solcast_|)(pv_forecast_|)forecast_(day_3|d3)) pv_forecast_d4: re:(sensor.(solcast_|)(pv_forecast_|)forecast_(day_4|d4)) Or make sure Solcast is installed and working ( https://github.com/oziee/ha-solcast-solar ). Note that Predbat does not update Solcast for you, it's recommended that you disable polling (due to the API polling limit) in the Solcast plugin and instead have your own automation that updates the forecast a few times a day (e.g. dawn, dusk and just before your nightly charge slot). Example Solcast update script: alias: Solcast update description: \"\" trigger: - platform: time at: \"23:00:00\" - platform: time at: \"12:00:00\" - platform: time at: \"04:00:00\" condition: [] action: - service: solcast_solar.update_forecasts data: {} mode: single Octopus Energy Follow the instructions at https://github.com/BottlecapDave/HomeAssistant-OctopusEnergy . Also see the notes in the Energy Rates section.","title":"Install details"},{"location":"install/#install","text":"","title":"Install"},{"location":"install/#inverter-control-integration-install-givtcpsolax-modbus","text":"The Integration that communicates with your inverter will be depend on the brand: Brand Integration Github Link GivEnergy GivTCP https://github.com/britkat1980/giv_tcp Solis SolaX ModBus https://github.com/wills106/homeassistant-solax-modbus You will need at least 24 hours history in HA for this to work correctly, the default is 7 days (but you configure this back 1 day if you need to)","title":"Inverter Control Integration install (GivTCP/SolaX-ModBus)"},{"location":"install/#appdaemon-install","text":"Install the AppDaemon add-on https://github.com/hassio-addons/addon-appdaemon You will find the appdaemon.yaml file in addon_configs/a0d7b954_appdaemon If using the File Editor remember to turn off enforce base path to allow access: Add to the appdaemon: section apps_dir which should point to /homeassistant/appdaemon/apps Set the time_zone correctly in appdaemon.yaml (e.g. Europe/London) Add thread_duration_warning_threshold: 120 to the appdaemon.yaml file in the appdaemon section It's recommended you set a new logfile location so that you can see the complete logs, I set mine to /homeassistant/appdaemon/appdaemon.log and increase the maximum size and number of generations to capture a few days worth Example config: appdaemon: latitude: 52.379189 longitude: 4.899431 elevation: 2 time_zone: Europe/London thread_duration_warning_threshold: 120 plugins: HASS: type: hass app_dir: /homeassistant/appdaemon/apps http: url: http://homeassistant.local:5050 admin: api: hadashboard: logs: main_log: filename: /homeassistant/appdaemon/appdaemon.log log_generations: 9 log_size: 10000000 CAUTION: Migrating from an older Appdaemon to 0.15.2 or above: Make sure you have access to the HA filesystem, e.g. I use the Samba add on and connect to the drives on my Mac, but you can use ssh also. Update AppDaemon to 0.15.2 Go into addon_configs/a0d7b954_appdaemon and edit appdaemon.yaml. You need to add app_dir (see above) to point to the old location and update your logfile location (if you have set it). You should remove the line that points to secrets.yaml (most people don't use this file) or adjust it's path to the new location (/homeassistant/secrets.yaml). Move the entire 'apps' directory from addon_configs/a0d7b954_appdaemon (new location) to config/appdaemon (the old location) Restart appdaemon Check it has started and confirm Predbat is running correctly again.","title":"AppDaemon install"},{"location":"install/#hacs-install","text":"Install HACS if you haven't already ( https://hacs.xyz/docs/setup/download ) Enable AppDaemon in HACS: https://hacs.xyz/docs/categories/appdaemon_apps/","title":"HACS install"},{"location":"install/#predbat-install","text":"Once installed you will get automatic updates from each release! Add https://github.com/springfall2008/batpred as a custom repository of type 'AppDaemon' Click on the Repo and Download the app After an update with HACS you may need to reboot AppDaemon as it sometimes reads the config wrongly during the update (If this happens you will get a template configuration error in the entity predbat.status). Edit in HomeAssistant config/appdaemon/apps/batpred/config/apps.yaml to configure Predbat - see Configuring apps.yaml . You must delete the 'template: True' line in the configuration to enable Predbat once you are happy with your configuration. You may initially want to set select.predbat_mode to Monitor to see how Predbat operates, to enable Predbat controls you should then set it to the correct mode of operation for your system. Note that future updates to Predbat will not overwrite apps.yaml, but you may need to copy settings for new features across manually When Predbat starts up initially it will perform a sanity check of the appDaemon configuration itself and confirm the right files are present. You will see this check in the log, should it fail a warning will be issued and predbat.status will also reflect the warning. While the above warning might not prevent Predbat from startup you should fix the issue ASAP as it may cause future problems.","title":"Predbat install"},{"location":"install/#predbat-manual-install","text":"Note: Not recommended if you have HACS Copy apps/predbat/predbat.py to 'config/appdaemon/apps/' directory in home assistant Copy apps/predbat/apps.yml to 'config/appdaemon/apps' directory in home assistant Edit in HomeAssistant config/appdaemon/apps/apps.yml to configure If you later install with HACS then you must move the apps.yml into config/appdaemon/apps/predbat/config","title":"Predbat manual install"},{"location":"install/#solcast-install","text":"Predbat needs a solar forecast in order to predict battery levels. If you don't have solar then comment out the Solar forecast part of the apps.yml: pv_forecast_today: re:(sensor.(solcast_|)(pv_forecast_|)forecast_today) pv_forecast_tomorrow: re:(sensor.(solcast_|)(pv_forecast_|)forecast_tomorrow) pv_forecast_d3: re:(sensor.(solcast_|)(pv_forecast_|)forecast_(day_3|d3)) pv_forecast_d4: re:(sensor.(solcast_|)(pv_forecast_|)forecast_(day_4|d4)) Or make sure Solcast is installed and working ( https://github.com/oziee/ha-solcast-solar ). Note that Predbat does not update Solcast for you, it's recommended that you disable polling (due to the API polling limit) in the Solcast plugin and instead have your own automation that updates the forecast a few times a day (e.g. dawn, dusk and just before your nightly charge slot). Example Solcast update script: alias: Solcast update description: \"\" trigger: - platform: time at: \"23:00:00\" - platform: time at: \"12:00:00\" - platform: time at: \"04:00:00\" condition: [] action: - service: solcast_solar.update_forecasts data: {} mode: single","title":"Solcast install"},{"location":"install/#octopus-energy","text":"Follow the instructions at https://github.com/BottlecapDave/HomeAssistant-OctopusEnergy . Also see the notes in the Energy Rates section.","title":"Octopus Energy"},{"location":"installation-summary/","text":"Installation summary Note there are step by step installation videos, see the video guides section for those and other videos. Please see the sections below for how to achieve each step. This is just a checklist of things: Make sure GivTCP is installed and running - GivTCP install Install AppDaemon if you haven't already - AppDaemon install Install HACS if you haven't already - HACS install Install Predbat using HACS - Predbat install Install Solcast if you haven't already Solcast install Also check Solcast is being auto-updated a few times a day and that you see the data in Home Assistant If you use Octopus Energy then install the Octopus Energy plugin (if you haven't already) - Octopus Energy CAUTION: You need to enable the events for previous, current and next rates for import and export in HA as the plugin leaves them disabled by default (see the above link for details) Go and edit apps.yaml (in config/appdaemon/apps/predbat/config/apps.yaml) to match your system - apps.yaml settings Inverter settings match the names in GivTCP - should be automatic (but if you have 2 names you will have to edit apps.yml) You have set the right number of inverters ( num_inverters ) Adjust your inverter_limit and export_limit as required You have your energy rates set correctly either using Octopus Plugin or entered manually That the Solcast plugin is matching the configuration correctly - should be automatic If you have a car charging sensor you might want to add that also to help make predictions more accurate Then check the AppDaemon log file and make sure you have no errors or warnings that are unexpected And check predbat.status in Home Assistant to check it's now Idle (errors are reported here too) Start with select.predbat_mode as Monitor but remember to change it later to enable Predbat to control your inverter Add the Predbat entities to your dashboard - Output data Follow the configuration guide to tune things for your system - Configuration guide Set up the Apex Charts so you can check what Predbat is doing - Creating the charts Set up the Predbat Plan card for another view on what Predbat is doing - Create the Predbat Plan card Look at the FAQ and Video Guides for help Overview of the key configuration elements:","title":"Install summary"},{"location":"installation-summary/#installation-summary","text":"Note there are step by step installation videos, see the video guides section for those and other videos. Please see the sections below for how to achieve each step. This is just a checklist of things: Make sure GivTCP is installed and running - GivTCP install Install AppDaemon if you haven't already - AppDaemon install Install HACS if you haven't already - HACS install Install Predbat using HACS - Predbat install Install Solcast if you haven't already Solcast install Also check Solcast is being auto-updated a few times a day and that you see the data in Home Assistant If you use Octopus Energy then install the Octopus Energy plugin (if you haven't already) - Octopus Energy CAUTION: You need to enable the events for previous, current and next rates for import and export in HA as the plugin leaves them disabled by default (see the above link for details) Go and edit apps.yaml (in config/appdaemon/apps/predbat/config/apps.yaml) to match your system - apps.yaml settings Inverter settings match the names in GivTCP - should be automatic (but if you have 2 names you will have to edit apps.yml) You have set the right number of inverters ( num_inverters ) Adjust your inverter_limit and export_limit as required You have your energy rates set correctly either using Octopus Plugin or entered manually That the Solcast plugin is matching the configuration correctly - should be automatic If you have a car charging sensor you might want to add that also to help make predictions more accurate Then check the AppDaemon log file and make sure you have no errors or warnings that are unexpected And check predbat.status in Home Assistant to check it's now Idle (errors are reported here too) Start with select.predbat_mode as Monitor but remember to change it later to enable Predbat to control your inverter Add the Predbat entities to your dashboard - Output data Follow the configuration guide to tune things for your system - Configuration guide Set up the Apex Charts so you can check what Predbat is doing - Creating the charts Set up the Predbat Plan card for another view on what Predbat is doing - Create the Predbat Plan card Look at the FAQ and Video Guides for help Overview of the key configuration elements:","title":"Installation summary"},{"location":"other-inverters/","text":"Other Inverters PredBat was originally written for GivEnergy inverters using the GivTCP integration but this is now being extended to other models: Solis Hybrid inverters Solax Modbus integration Solax Gen4 inverters Solax Modbus integration in Modbus Power Control Mode SolarEdge inverters - Work in progress, please contribute Note that support for all these inverters is in various stages of development. Please expect things to fail and report them as Issues on Github. Please also ensure you have set up enhanced logging in AppDaemon as described here. Solis Inverters To run PredBat with Solis hybrid inverters, follow the following steps: Install PredBat as per the Installation Summary Ensure that you have the Solax Modbus integration running. There are a number of entities which this integration disables by default that you will need to enable via the Home Assistant GUI: Name Description sensor.solisx_rtc Real Time Clock sensor.solisx_battery_power Battery Power Instead of apps.yaml use ginlong_solis.yaml from this Repo as your starting template. The majority of settings should be correct but please check. You will need to un-comment the template line to enable it. Save it to the config/appdaemon/apps/predbat/config folder. Ensure that the inverter is set Control Mode 35 - on the Solax integration this is Timed Charge/Discharge . If you want to use the Reserve functionality within PredBat you will need to select Backup/Reserve (code 51) instead but be aware that this is not fully tested. In due course these mode settings will be incorporated into the code.","title":"Other Inverters"},{"location":"other-inverters/#other-inverters","text":"PredBat was originally written for GivEnergy inverters using the GivTCP integration but this is now being extended to other models: Solis Hybrid inverters Solax Modbus integration Solax Gen4 inverters Solax Modbus integration in Modbus Power Control Mode SolarEdge inverters - Work in progress, please contribute Note that support for all these inverters is in various stages of development. Please expect things to fail and report them as Issues on Github. Please also ensure you have set up enhanced logging in AppDaemon as described here.","title":"Other Inverters"},{"location":"other-inverters/#solis-inverters","text":"To run PredBat with Solis hybrid inverters, follow the following steps: Install PredBat as per the Installation Summary Ensure that you have the Solax Modbus integration running. There are a number of entities which this integration disables by default that you will need to enable via the Home Assistant GUI: Name Description sensor.solisx_rtc Real Time Clock sensor.solisx_battery_power Battery Power Instead of apps.yaml use ginlong_solis.yaml from this Repo as your starting template. The majority of settings should be correct but please check. You will need to un-comment the template line to enable it. Save it to the config/appdaemon/apps/predbat/config folder. Ensure that the inverter is set Control Mode 35 - on the Solax integration this is Timed Charge/Discharge . If you want to use the Reserve functionality within PredBat you will need to select Backup/Reserve (code 51) instead but be aware that this is not fully tested. In due course these mode settings will be incorporated into the code.","title":"Solis Inverters"},{"location":"output-data/","text":"Output data Displaying output data Each Predbat config item has an input_number or switch associated with it, you can find an auto-generated dashboard for your configuration in your AppDaemon configuration area under the filename predbat_dashboard.yaml . You will need to open that file in a Home Assistant file editor and copy the contents into a new dashboard page. You can also create a dashboard page using dynamic-entities-card.yaml for a dynamically created list of all Predbat entities which groups the entities by type and is collapsed by default to prevent screen clutter. Requires lovelace-collapsable-cards ( https://github.com/RossMcMillan92/lovelace-collapsable-cards ) and lovelace-auto-entities ( https://github.com/thomasloven/lovelace-auto-entities ) to be installed via HACS as well as the stock vertical stack card. Credit @DJBenson for the code. The Predbat Plan card is very useful for seeing the plan that Predbat has created - Create the Predbat Plan card . A set of Apex Charts can also be created to see graphically what Predbat plans to do - Creating the charts . Basic status predbat.status - Gives the current status & errors and logs any changes that Predbat makes to your inverter Baseline data What your battery is expected to do with no changes made by Predbat: predbat.battery_hours_left - The number of hours left until your home battery is predicted to run out (stops at the maximum prediction time) predbat.charge_limit - The current charge limit used for the scenario in % predbat.charge_limit_kw - The current charge limit used for the scenario in kwH predbat.duration - The duration of the prediction maximum in hours predbat.load_energy - Predicted load energy in kWh predbat.pv_energy - Predicted PV energy in kWh predbat.export_energy - Predicted export energy in kWh predbat.import_energy - Predicted import energy in kWh predbat.import_energy_battery - Predicted import energy to charge your home battery in kWh predbat.import_energy_house - Predicted import energy not provided by your home battery (flat battery or above maximum discharge rate) predbat.soc_kw - Predicted state of charge (in kWh) at the end of the prediction, not very useful in itself, but holds all minute by minute prediction data (in attributes) which can be charted with Apex Charts (or similar) predbat.soc_min_kwh - The minimum battery level during the time period in kWh predbat.metric - Predicted cost metric for the next simulated period (in pence). Also contains data for charting cost in attributes. predbat.battery_power - Predicted battery power per minute, for charting predbat.battery_cycle - Predicted battery cycle in kWh (total kWh processed) predbat.pv_power - Predicted PV power per minute, for charting predbat.grid_power - Predicted Grid power per minute, for charting predbat.car_soc - Predicted car battery % PV 10% baseline data The calculated baseline results under PV 10% scenario: predbat.soc_kw_base10 - As soc_kw but using the 10% solar forecast, also holds minute by minute data (in attributes) to be charted predbat.base10_pv_energy - Predicted PV 10% energy in kWh predbat.base10_metric - Predicted cost for PV 10% predbat.base10_export_energy- Predicted export energy for PV 10% predbat.base10_load_energy - Predicted load energy for PV 10% predbat.base10_import_energy- Predicted import energy for PV 10% Best When calculate_best is enabled a second set of entities are created for the simulation based on the best battery charge percentage: predbat.best_battery_hours_left - Number of hours left under best plan predbat.best_export_energy - Predicted exports under best plan predbat_best_import_energy - Predicted imports under best plan predbat_best_load - Predicted best load energy predbat.best_pv_energy - Predicted Best PV energy in kWh predbat_best_import_energy_battery - Predicted imports to the battery under best SOC setting predbat_best_import_energy_house - Predicted imports to the house under best SOC setting predbat_soc_kw_best - Predicted best final state of charge (in kWh), holds minute by minute prediction data (in attributes) to be charted predbat.soc_kw_best_h1 - Single data point for the predicted state of charge in 1 hours time (useful for calibration charts, predicted vs actual) predbat.soc_kw_best_h8 - Single data point for the predicted state of charge in 8 hours time (useful for calibration charts, predicted vs actual) predbat.soc_kw_best_h12 - Single data point for the predicted state of charge in 12 hours time (useful for calibration charts, predicted vs actual) predbat_best_metric - The predicted cost if the proposed SOC % charge target is selected. Also contains data for charting cost in attributes. predbat.best_charge_limit - Predicted best battery charge limit in percent predbat.best_charge_limit_kw - Predicted best battery charge limit in kwH predbat.best_discharge_limit - Predicted best battery discharge limit in percent (will be 0% when discharging or 100% when not) predbat.best_discharge_limit_kw - Predicted best battery discharge limit in kwH predbat.battery_power_best - Predicted best battery power per minute, for charting predbat.battery_cycle_best - Predicted best battery cycle in kWh (total kWh processed) predbat.pv_power_best - Predicted best PV power per minute, for charting predbat.grid_power - Predicted best Grid power per minute, for charting predbat.car_soc_best - Predicated car battery % in best plan predbat.iboost_best - Gives the predicted energy going into the iBoost - for charter input_number.iboost_today - Gives the amount of energy modelled into the diverter today, resets at 11:30pm each night. Increments in the day. Best PV 10% The calculated best results under PV 10% scenario: predbat.soc_kw_best10 - As soc_kw_best but using the 10% solar forecast, also holds minute by minute data (in attributes) to be charted predbat.best10_pv_energy - Predicted best PV 10% energy in kWh predbat.best10_metric - Predicted best cost for PV 10% predbat.best10_export_energy- Predicted best export energy for PV 10% predbat.best10_load_energy - Predicted best load energy for PV 10% predbat.best10_import_energy- Predicted best import energy for PV 10% Energy rate data Low import rate entities predbat.low_rate_cost - The lowest import rate cost in P predbat.low_rate_start - Start time of the next low import rate predbat.low_rate_end - End time of the next low import rate predbat.low_rate_cost_2, predbat.low_rate_start_2, predbat.low_rate_end_2 - The following low import rate slot binary_sensor.predbat_low_rate_slot - A sensor that indicates which there is a low energy rate slot active High export rate entities predbat.high_export_rate_cost - The highest rate cost in P predbat.high_export_rate_start - Start time of the next high export rate predbat.high_export_rate_end - End time of the next high export rate predbat.high_export_rate_cost_2, predbat.high_export_rate_start_2, predbat.high_export_rate_end_2 - The following high export rate slot binary_sensor.predbat_high_export_rate_slot - A sensor that indicates which there is a high export rate slot active Other rate entities predbat.rates - The current energy rates in P (also can be charted) predbat.rates_export - The current energy export rates in P (also be be charted) predbat.cost_today - The total cost of energy so far today (since midnight) predbat.car_soc - The expected charge level of your car at the end of the simulation. Can also be charted. predbat.car_soc_best - The expected charge level of your car at the end of the simulation using the proposed SOC%/Window. Can also be charted. Car data binary_sensor.predbat_car_charging_slot - A binary sensor suggesting when to charge your car (if the car planning is enabled) Sample Predbat data out Monitoring that Predbat and GivTCP are running OK With GivTCP and Predbat performing an important function, managing your battery charging and discharging to best reduce your electricity bills, you may find these automations useful to monitor that GivTCP and Predbat are running OK, and if not, to raise an alert on your mobile device. GivTCP activity monitor This automation will raise an alert if any of the following occur: The inverter goes offline for more than 30 minutes No last_updated_time received from the inverter for more than 30 minutes The battery goes offline to the inverter for more than 30 minutes The script will need to be customised for your inverter id, battery id and mobile details, and can be extended for multiple inverters and batteries. alias: GivTCP activity monitor description: Alert when communications to GivTCP have ceased for 30 minutes trigger: - platform: state entity_id: sensor.givtcp_<inverter id>_last_updated_time to: null for: minutes: 30 id: no-givtcp-update variables: inv_id: inverter <id> - platform: state entity_id: - sensor.givtcp_<inverter id>_status from: online for: minutes: 30 id: no-givtcp-update variables: inv_id: inverter <id> - platform: state entity_id: - sensor.givtcp_<battery id>_battery_cells to: unknown for: minutes: 30 id: battery-unavailable variables: batt_id: <batt size/id> action: - condition: trigger id: - no-givtcp-update - service: notify.mobile_app_<your mobile device id> data: title: GivTCP communication issue message: | {{ now().timestamp() | timestamp_custom('%-d %b %H:%M') }} ISSUE: No GivTCP update received from {{ inv_id }} for the past 30 minutes. data: visibility: public persistent: true push: sound: name: default critical: 1 volume: 0.8 sticky: true color: red - condition: trigger id: - battery-unavailable - service: notify.mobile_app_<your mobile device id> data: title: GivTCP communication issue message: | {{ now().timestamp() | timestamp_custom('%-d %b %H:%M') }} ISSUE: Battery {{ batt_id }} offline to GivTCP for the past 30 minutes. data: visibility: public persistent: true push: sound: name: default critical: 1 volume: 0.8 sticky: true color: red mode: single Predbat error monitor This automation will raise an alert if Predbat's status turns to ERROR for more than 10 minutes. The script will need to be customised for your mobile details. alias: predbat error monitor description: Alert when Predbat has raised an exception trigger: - platform: state entity_id: - predbat.status to: \"ERROR: Exception raised\" for: minutes: 10 - platform: template value_template: \"{{ 'ERROR' in states('predbat.status') }}\" for: minutes: 10 action: - service: notify.mobile_app_<your mobile device id> data: title: Predbat status issue message: | {{ now().timestamp() | timestamp_custom('%-d %b %H:%M') }} ISSUE: predbat status is {{ states('predbat.status') }} data: visibility: public persistent: true push: sound: name: default critical: 1 volume: 0.8 sticky: true color: red mode: single An error alert looks like this:","title":"Output data"},{"location":"output-data/#output-data","text":"","title":"Output data"},{"location":"output-data/#displaying-output-data","text":"Each Predbat config item has an input_number or switch associated with it, you can find an auto-generated dashboard for your configuration in your AppDaemon configuration area under the filename predbat_dashboard.yaml . You will need to open that file in a Home Assistant file editor and copy the contents into a new dashboard page. You can also create a dashboard page using dynamic-entities-card.yaml for a dynamically created list of all Predbat entities which groups the entities by type and is collapsed by default to prevent screen clutter. Requires lovelace-collapsable-cards ( https://github.com/RossMcMillan92/lovelace-collapsable-cards ) and lovelace-auto-entities ( https://github.com/thomasloven/lovelace-auto-entities ) to be installed via HACS as well as the stock vertical stack card. Credit @DJBenson for the code. The Predbat Plan card is very useful for seeing the plan that Predbat has created - Create the Predbat Plan card . A set of Apex Charts can also be created to see graphically what Predbat plans to do - Creating the charts .","title":"Displaying output data"},{"location":"output-data/#basic-status","text":"predbat.status - Gives the current status & errors and logs any changes that Predbat makes to your inverter","title":"Basic status"},{"location":"output-data/#baseline-data","text":"What your battery is expected to do with no changes made by Predbat: predbat.battery_hours_left - The number of hours left until your home battery is predicted to run out (stops at the maximum prediction time) predbat.charge_limit - The current charge limit used for the scenario in % predbat.charge_limit_kw - The current charge limit used for the scenario in kwH predbat.duration - The duration of the prediction maximum in hours predbat.load_energy - Predicted load energy in kWh predbat.pv_energy - Predicted PV energy in kWh predbat.export_energy - Predicted export energy in kWh predbat.import_energy - Predicted import energy in kWh predbat.import_energy_battery - Predicted import energy to charge your home battery in kWh predbat.import_energy_house - Predicted import energy not provided by your home battery (flat battery or above maximum discharge rate) predbat.soc_kw - Predicted state of charge (in kWh) at the end of the prediction, not very useful in itself, but holds all minute by minute prediction data (in attributes) which can be charted with Apex Charts (or similar) predbat.soc_min_kwh - The minimum battery level during the time period in kWh predbat.metric - Predicted cost metric for the next simulated period (in pence). Also contains data for charting cost in attributes. predbat.battery_power - Predicted battery power per minute, for charting predbat.battery_cycle - Predicted battery cycle in kWh (total kWh processed) predbat.pv_power - Predicted PV power per minute, for charting predbat.grid_power - Predicted Grid power per minute, for charting predbat.car_soc - Predicted car battery %","title":"Baseline data"},{"location":"output-data/#pv-10-baseline-data","text":"The calculated baseline results under PV 10% scenario: predbat.soc_kw_base10 - As soc_kw but using the 10% solar forecast, also holds minute by minute data (in attributes) to be charted predbat.base10_pv_energy - Predicted PV 10% energy in kWh predbat.base10_metric - Predicted cost for PV 10% predbat.base10_export_energy- Predicted export energy for PV 10% predbat.base10_load_energy - Predicted load energy for PV 10% predbat.base10_import_energy- Predicted import energy for PV 10%","title":"PV 10% baseline data"},{"location":"output-data/#best","text":"When calculate_best is enabled a second set of entities are created for the simulation based on the best battery charge percentage: predbat.best_battery_hours_left - Number of hours left under best plan predbat.best_export_energy - Predicted exports under best plan predbat_best_import_energy - Predicted imports under best plan predbat_best_load - Predicted best load energy predbat.best_pv_energy - Predicted Best PV energy in kWh predbat_best_import_energy_battery - Predicted imports to the battery under best SOC setting predbat_best_import_energy_house - Predicted imports to the house under best SOC setting predbat_soc_kw_best - Predicted best final state of charge (in kWh), holds minute by minute prediction data (in attributes) to be charted predbat.soc_kw_best_h1 - Single data point for the predicted state of charge in 1 hours time (useful for calibration charts, predicted vs actual) predbat.soc_kw_best_h8 - Single data point for the predicted state of charge in 8 hours time (useful for calibration charts, predicted vs actual) predbat.soc_kw_best_h12 - Single data point for the predicted state of charge in 12 hours time (useful for calibration charts, predicted vs actual) predbat_best_metric - The predicted cost if the proposed SOC % charge target is selected. Also contains data for charting cost in attributes. predbat.best_charge_limit - Predicted best battery charge limit in percent predbat.best_charge_limit_kw - Predicted best battery charge limit in kwH predbat.best_discharge_limit - Predicted best battery discharge limit in percent (will be 0% when discharging or 100% when not) predbat.best_discharge_limit_kw - Predicted best battery discharge limit in kwH predbat.battery_power_best - Predicted best battery power per minute, for charting predbat.battery_cycle_best - Predicted best battery cycle in kWh (total kWh processed) predbat.pv_power_best - Predicted best PV power per minute, for charting predbat.grid_power - Predicted best Grid power per minute, for charting predbat.car_soc_best - Predicated car battery % in best plan predbat.iboost_best - Gives the predicted energy going into the iBoost - for charter input_number.iboost_today - Gives the amount of energy modelled into the diverter today, resets at 11:30pm each night. Increments in the day.","title":"Best"},{"location":"output-data/#best-pv-10","text":"The calculated best results under PV 10% scenario: predbat.soc_kw_best10 - As soc_kw_best but using the 10% solar forecast, also holds minute by minute data (in attributes) to be charted predbat.best10_pv_energy - Predicted best PV 10% energy in kWh predbat.best10_metric - Predicted best cost for PV 10% predbat.best10_export_energy- Predicted best export energy for PV 10% predbat.best10_load_energy - Predicted best load energy for PV 10% predbat.best10_import_energy- Predicted best import energy for PV 10%","title":"Best PV 10%"},{"location":"output-data/#energy-rate-data","text":"","title":"Energy rate data"},{"location":"output-data/#low-import-rate-entities","text":"predbat.low_rate_cost - The lowest import rate cost in P predbat.low_rate_start - Start time of the next low import rate predbat.low_rate_end - End time of the next low import rate predbat.low_rate_cost_2, predbat.low_rate_start_2, predbat.low_rate_end_2 - The following low import rate slot binary_sensor.predbat_low_rate_slot - A sensor that indicates which there is a low energy rate slot active","title":"Low import rate entities"},{"location":"output-data/#high-export-rate-entities","text":"predbat.high_export_rate_cost - The highest rate cost in P predbat.high_export_rate_start - Start time of the next high export rate predbat.high_export_rate_end - End time of the next high export rate predbat.high_export_rate_cost_2, predbat.high_export_rate_start_2, predbat.high_export_rate_end_2 - The following high export rate slot binary_sensor.predbat_high_export_rate_slot - A sensor that indicates which there is a high export rate slot active","title":"High export rate entities"},{"location":"output-data/#other-rate-entities","text":"predbat.rates - The current energy rates in P (also can be charted) predbat.rates_export - The current energy export rates in P (also be be charted) predbat.cost_today - The total cost of energy so far today (since midnight) predbat.car_soc - The expected charge level of your car at the end of the simulation. Can also be charted. predbat.car_soc_best - The expected charge level of your car at the end of the simulation using the proposed SOC%/Window. Can also be charted.","title":"Other rate entities"},{"location":"output-data/#car-data","text":"binary_sensor.predbat_car_charging_slot - A binary sensor suggesting when to charge your car (if the car planning is enabled)","title":"Car data"},{"location":"output-data/#sample-predbat-data-out","text":"","title":"Sample Predbat data out"},{"location":"output-data/#monitoring-that-predbat-and-givtcp-are-running-ok","text":"With GivTCP and Predbat performing an important function, managing your battery charging and discharging to best reduce your electricity bills, you may find these automations useful to monitor that GivTCP and Predbat are running OK, and if not, to raise an alert on your mobile device.","title":"Monitoring that Predbat and GivTCP are running OK"},{"location":"output-data/#givtcp-activity-monitor","text":"This automation will raise an alert if any of the following occur: The inverter goes offline for more than 30 minutes No last_updated_time received from the inverter for more than 30 minutes The battery goes offline to the inverter for more than 30 minutes The script will need to be customised for your inverter id, battery id and mobile details, and can be extended for multiple inverters and batteries. alias: GivTCP activity monitor description: Alert when communications to GivTCP have ceased for 30 minutes trigger: - platform: state entity_id: sensor.givtcp_<inverter id>_last_updated_time to: null for: minutes: 30 id: no-givtcp-update variables: inv_id: inverter <id> - platform: state entity_id: - sensor.givtcp_<inverter id>_status from: online for: minutes: 30 id: no-givtcp-update variables: inv_id: inverter <id> - platform: state entity_id: - sensor.givtcp_<battery id>_battery_cells to: unknown for: minutes: 30 id: battery-unavailable variables: batt_id: <batt size/id> action: - condition: trigger id: - no-givtcp-update - service: notify.mobile_app_<your mobile device id> data: title: GivTCP communication issue message: | {{ now().timestamp() | timestamp_custom('%-d %b %H:%M') }} ISSUE: No GivTCP update received from {{ inv_id }} for the past 30 minutes. data: visibility: public persistent: true push: sound: name: default critical: 1 volume: 0.8 sticky: true color: red - condition: trigger id: - battery-unavailable - service: notify.mobile_app_<your mobile device id> data: title: GivTCP communication issue message: | {{ now().timestamp() | timestamp_custom('%-d %b %H:%M') }} ISSUE: Battery {{ batt_id }} offline to GivTCP for the past 30 minutes. data: visibility: public persistent: true push: sound: name: default critical: 1 volume: 0.8 sticky: true color: red mode: single","title":"GivTCP activity monitor"},{"location":"output-data/#predbat-error-monitor","text":"This automation will raise an alert if Predbat's status turns to ERROR for more than 10 minutes. The script will need to be customised for your mobile details. alias: predbat error monitor description: Alert when Predbat has raised an exception trigger: - platform: state entity_id: - predbat.status to: \"ERROR: Exception raised\" for: minutes: 10 - platform: template value_template: \"{{ 'ERROR' in states('predbat.status') }}\" for: minutes: 10 action: - service: notify.mobile_app_<your mobile device id> data: title: Predbat status issue message: | {{ now().timestamp() | timestamp_custom('%-d %b %H:%M') }} ISSUE: predbat status is {{ states('predbat.status') }} data: visibility: public persistent: true push: sound: name: default critical: 1 volume: 0.8 sticky: true color: red mode: single An error alert looks like this:","title":"Predbat error monitor"},{"location":"predbat-plan-card/","text":"Predbat Plan card Predbat can create its own plan card which can be added to your HA dashboard. First install html-template-card in HACS (from the Frontend list), it will already be available to add, but for reference the repository can be found here: https://github.com/PiotrMachowski/Home-Assistant-Lovelace-HTML-Jinja2-Template-card Next create a new card as follows: type: custom:html-template-card title: Predbat plan ignore_line_breaks: true content: | {{ state_attr('predbat.plan_html', 'html') }} You should see something like this:","title":"Predbat Plan card"},{"location":"predbat-plan-card/#predbat-plan-card","text":"Predbat can create its own plan card which can be added to your HA dashboard. First install html-template-card in HACS (from the Frontend list), it will already be available to add, but for reference the repository can be found here: https://github.com/PiotrMachowski/Home-Assistant-Lovelace-HTML-Jinja2-Template-card Next create a new card as follows: type: custom:html-template-card title: Predbat plan ignore_line_breaks: true content: | {{ state_attr('predbat.plan_html', 'html') }} You should see something like this:","title":"Predbat Plan card"},{"location":"todo-list/","text":"To-do list See Github issues","title":"To-do list"},{"location":"todo-list/#to-do-list","text":"See Github issues","title":"To-do list"},{"location":"video-guides/","text":"Video Guides Many people have been asking for video guides for Predbat so I'm going to start recording some of them. Overview https://www.loom.com/share/e7092cce5c6b4caeb87516f98fcb3292?sid=e064dcef-e4aa-4b61-9698-3fa7922d5a69 Basic installation https://www.loom.com/share/549cc800277b4d39874d9d6a65c0d0aa?sid=580b3293-f65c-4f6b-9c8c-0bef4cb75cc1 https://www.loom.com/share/e46e9e0159b04cc89abb05ef21c34f9c?sid=a0fc7e9c-1484-4535-8052-46f6f9721862 https://www.loom.com/share/a245dcf30b744e3dbfab3ed874f52855?sid=6bd07f2f-b507-4575-877f-840c4b6cc8c7 AppDaemon Fixing the new version so HACS still works: https://www.loom.com/share/d1f9e4432c2443eca1e236939b25bb99?sid=fe0627c7-85c1-4de4-a778-de50b58e4687 Log files: https://www.loom.com/share/562e3246c359451ea69428316f58f17f?sid=30bee2e7-86fc-4aca-8081-7c0de255b2e7 Historical data https://www.loom.com/share/43f3a71e9a6448c4844a26fbc4f19a3d?sid=8fc24279-4a86-4acc-9fad-e4841d0c01b3 Configuring Predbat Configuration of apps.yml: https://www.loom.com/share/fa0db1b1fce34db09bb4af76b2e7edef?sid=6456019a-62e3-4e59-95f9-092474a8a5e5 Configuration inside HA: https://www.loom.com/share/78e4b4f91fdb45068665e769334a934b?sid=0388e0c3-5cf1-42ee-8dd3-3992683c4c36 Multiple cars: https://www.loom.com/share/c8858d80ea334b2a885f09121dc72650?sid=f37aadc3-d804-4c4f-8c60-a3d0bc43298b Octopus Energy plugin >v9.0.0: https://www.loom.com/share/f11e36eaa4784c6980c5a8a68ee4f674 Charts Understand the charts: https://www.loom.com/share/e0e312fbb6874f559cd91ca8e292686c?sid=8125a3b0-0321-4583-9038-e252ddbcb038 How to understand Predbat plans: https://www.loom.com/share/e55b578d08c7414788e88948325907fa?sid=279ff3e5-01a2-4f81-a316-b3d3b2697e8a Tariffs Intelligent Octopus import + Agile export: https://www.loom.com/share/29b341b70b6b473a9c5ceb6c29996d3c?sid=5a8fe2ba-3235-47c3-a428-48aa4be3d9e2 Intelligent Octopus import + Fixed export: https://www.loom.com/share/c604cb0eefbb499391037bb32173f6e8?sid=5a0a31dc-01f5-4364-b781-c5a7c297bf0c Octopus Agile import + Agile export: https://www.loom.com/share/5f007eff9d984dc8bdb03df708fde711?sid=4ae133c4-c7e5-4307-8c50-8737d1ca1593 Octopus Flux: https://www.loom.com/share/c5eec8986416448c8c30546b9d4ac220?sid=2262fc1c-515b-405e-8540-67d5084b6e55 Intelligent Octopus car charging: https://www.loom.com/share/ab4650c95df84b23895b4004ab8d8b71?sid=b1e99613-8f87-488b-b03b-401afe442083 Octopus Saving Sessions: https://www.loom.com/share/57066bec571d42099fa1175059c837ee?sid=acee151f-cda4-40e7-9b3d-9de070882a53","title":"Video Guides"},{"location":"video-guides/#video-guides","text":"Many people have been asking for video guides for Predbat so I'm going to start recording some of them.","title":"Video Guides"},{"location":"video-guides/#overview","text":"https://www.loom.com/share/e7092cce5c6b4caeb87516f98fcb3292?sid=e064dcef-e4aa-4b61-9698-3fa7922d5a69","title":"Overview"},{"location":"video-guides/#basic-installation","text":"https://www.loom.com/share/549cc800277b4d39874d9d6a65c0d0aa?sid=580b3293-f65c-4f6b-9c8c-0bef4cb75cc1 https://www.loom.com/share/e46e9e0159b04cc89abb05ef21c34f9c?sid=a0fc7e9c-1484-4535-8052-46f6f9721862 https://www.loom.com/share/a245dcf30b744e3dbfab3ed874f52855?sid=6bd07f2f-b507-4575-877f-840c4b6cc8c7","title":"Basic installation"},{"location":"video-guides/#appdaemon","text":"Fixing the new version so HACS still works: https://www.loom.com/share/d1f9e4432c2443eca1e236939b25bb99?sid=fe0627c7-85c1-4de4-a778-de50b58e4687 Log files: https://www.loom.com/share/562e3246c359451ea69428316f58f17f?sid=30bee2e7-86fc-4aca-8081-7c0de255b2e7","title":"AppDaemon"},{"location":"video-guides/#historical-data","text":"https://www.loom.com/share/43f3a71e9a6448c4844a26fbc4f19a3d?sid=8fc24279-4a86-4acc-9fad-e4841d0c01b3","title":"Historical data"},{"location":"video-guides/#configuring-predbat","text":"Configuration of apps.yml: https://www.loom.com/share/fa0db1b1fce34db09bb4af76b2e7edef?sid=6456019a-62e3-4e59-95f9-092474a8a5e5 Configuration inside HA: https://www.loom.com/share/78e4b4f91fdb45068665e769334a934b?sid=0388e0c3-5cf1-42ee-8dd3-3992683c4c36 Multiple cars: https://www.loom.com/share/c8858d80ea334b2a885f09121dc72650?sid=f37aadc3-d804-4c4f-8c60-a3d0bc43298b Octopus Energy plugin >v9.0.0: https://www.loom.com/share/f11e36eaa4784c6980c5a8a68ee4f674","title":"Configuring Predbat"},{"location":"video-guides/#charts","text":"Understand the charts: https://www.loom.com/share/e0e312fbb6874f559cd91ca8e292686c?sid=8125a3b0-0321-4583-9038-e252ddbcb038 How to understand Predbat plans: https://www.loom.com/share/e55b578d08c7414788e88948325907fa?sid=279ff3e5-01a2-4f81-a316-b3d3b2697e8a","title":"Charts"},{"location":"video-guides/#tariffs","text":"Intelligent Octopus import + Agile export: https://www.loom.com/share/29b341b70b6b473a9c5ceb6c29996d3c?sid=5a8fe2ba-3235-47c3-a428-48aa4be3d9e2 Intelligent Octopus import + Fixed export: https://www.loom.com/share/c604cb0eefbb499391037bb32173f6e8?sid=5a0a31dc-01f5-4364-b781-c5a7c297bf0c Octopus Agile import + Agile export: https://www.loom.com/share/5f007eff9d984dc8bdb03df708fde711?sid=4ae133c4-c7e5-4307-8c50-8737d1ca1593 Octopus Flux: https://www.loom.com/share/c5eec8986416448c8c30546b9d4ac220?sid=2262fc1c-515b-405e-8540-67d5084b6e55 Intelligent Octopus car charging: https://www.loom.com/share/ab4650c95df84b23895b4004ab8d8b71?sid=b1e99613-8f87-488b-b03b-401afe442083 Octopus Saving Sessions: https://www.loom.com/share/57066bec571d42099fa1175059c837ee?sid=acee151f-cda4-40e7-9b3d-9de070882a53","title":"Tariffs"},{"location":"what-does-predbat-do/","text":"What does Predbat do? Predbat runs every 5 minutes and will automatically update its prediction for the home battery levels for the next period, up to a maximum of 48 hours. It will automatically decide when to charge and discharge your battery to achieve the best cost metric within the parameters you have set. It uses the solar production forecast from Solcast combined with your historical energy use to make this prediction. The output is a prediction of the battery levels, charging slots, discharging slots, costs and import and export amounts. Costs are based on energy pricing data, either manually configured (e.g. 7p from 11pm-4pm and 35p otherwise) or by using the Octopus Plugin Both import and export rates are supported. Intelligent Octopus is also supported and takes into account allocated charging slots. The solar forecast used is the central scenario from Solcast (50%) with a weighting towards the more pessimistic (10%) scenario. The charging and discharging controls are automatically programmed into the inverter. Automatic planning of export slots is also supported, when enabled Batpred can start a forced discharge of the battery if the export rates are high and you have spare capacity. Historical load data is used to predict your consumption, optionally car charging load can be filtered out of this data. Predbat can be configured to manage the charging of your EV and take into account its load on the house during these periods. Multiple inverter support depends on running all inverters in lockstep. Terminology Basic terminology SOC - State of Charge - the % or kWh level of charge of your battery Target SOC - The target level that the battery is being charged to, e.g. we target 100% SOC means the battery is being charged to full Load - The energy your home is using to power your equipment e.g. oven, lights or electric car charging Grid - Your electric supply outside the house Import - Electricity drawn from the grid to be used in the home or to charge the battery Export - Electricity from your home from the battery or solar which is sent to the grid. PV - Solar power that is generated in your home Inverter - The box that converts DC energy from solar or from your battery into AC power for your home and the grid. It also converts AC power from the grid into DC to charge a battery. Hybrid inverter - An inverter that can charge a battery from solar directly using DC power as well as charging it from AC power from the grid. AC Coupled - A battery that comes with it's own inverter and is always charge or discharged with AC (using an internal inverter) Slot - A period of time where Predbat performs an action e.g. charging. In Predbat everything is a multiple of 5 minutes. Charge slots are always multiples of 30 minutes and align to a 30-minute boundary to match the way energy rates are allocated. Discharge slots can be any multiple of 5 minutes and always finish on a 30-minute boundary. Predbat modes When you first install Predbat it will be in Monitor Only mode. Can you configure the mode of operation using the drop down menu in select.predbat_mode . You will find a full description of the modes under: Predbat Monitor Mode Once you are ready for Predbat to take control move this setting to one of the active control modes. Predbat status The current Predbat status is reported in predbat.status Idle - This is the default, the load will be covered by solar and/or battery. Excess solar will charge the battery or be exported if the battery is full. This will be described as ECO Mode for Givenergy inverters but other inverters use different terminology. Charge - The battery charges from the grid and the grid also covers any load. Solar power will also be used to charge the battery. Charge Freeze - The current battery level is held and the grid/solar covers any load. Solar power will also be used to charge the battery. Hold Charge - A type of charge where the target % is the same as the current %, effectively the same as a charge freeze (but without being explicitly selected) No Charge - A charge where the target % is lower than the current battery level so there will be no charging unless the usage is unexpectedly high. Discharge - A force discharge slot where the battery is exported to the grid. The battery covers the load. Any solar generated will be exported. Discharge Freeze - A slot where the battery covers the load but charging is disabled, thus any solar generated will be exported. Error - There is a configuration error or other problem, you should check the AppDaemon log in home assistant for more details (Settings, System, Logs, AppDaemon)","title":"What does Predbat do?"},{"location":"what-does-predbat-do/#what-does-predbat-do","text":"Predbat runs every 5 minutes and will automatically update its prediction for the home battery levels for the next period, up to a maximum of 48 hours. It will automatically decide when to charge and discharge your battery to achieve the best cost metric within the parameters you have set. It uses the solar production forecast from Solcast combined with your historical energy use to make this prediction. The output is a prediction of the battery levels, charging slots, discharging slots, costs and import and export amounts. Costs are based on energy pricing data, either manually configured (e.g. 7p from 11pm-4pm and 35p otherwise) or by using the Octopus Plugin Both import and export rates are supported. Intelligent Octopus is also supported and takes into account allocated charging slots. The solar forecast used is the central scenario from Solcast (50%) with a weighting towards the more pessimistic (10%) scenario. The charging and discharging controls are automatically programmed into the inverter. Automatic planning of export slots is also supported, when enabled Batpred can start a forced discharge of the battery if the export rates are high and you have spare capacity. Historical load data is used to predict your consumption, optionally car charging load can be filtered out of this data. Predbat can be configured to manage the charging of your EV and take into account its load on the house during these periods. Multiple inverter support depends on running all inverters in lockstep.","title":"What does Predbat do?"},{"location":"what-does-predbat-do/#terminology","text":"","title":"Terminology"},{"location":"what-does-predbat-do/#basic-terminology","text":"SOC - State of Charge - the % or kWh level of charge of your battery Target SOC - The target level that the battery is being charged to, e.g. we target 100% SOC means the battery is being charged to full Load - The energy your home is using to power your equipment e.g. oven, lights or electric car charging Grid - Your electric supply outside the house Import - Electricity drawn from the grid to be used in the home or to charge the battery Export - Electricity from your home from the battery or solar which is sent to the grid. PV - Solar power that is generated in your home Inverter - The box that converts DC energy from solar or from your battery into AC power for your home and the grid. It also converts AC power from the grid into DC to charge a battery. Hybrid inverter - An inverter that can charge a battery from solar directly using DC power as well as charging it from AC power from the grid. AC Coupled - A battery that comes with it's own inverter and is always charge or discharged with AC (using an internal inverter) Slot - A period of time where Predbat performs an action e.g. charging. In Predbat everything is a multiple of 5 minutes. Charge slots are always multiples of 30 minutes and align to a 30-minute boundary to match the way energy rates are allocated. Discharge slots can be any multiple of 5 minutes and always finish on a 30-minute boundary.","title":"Basic terminology"},{"location":"what-does-predbat-do/#predbat-modes","text":"When you first install Predbat it will be in Monitor Only mode. Can you configure the mode of operation using the drop down menu in select.predbat_mode . You will find a full description of the modes under: Predbat Monitor Mode Once you are ready for Predbat to take control move this setting to one of the active control modes.","title":"Predbat modes"},{"location":"what-does-predbat-do/#predbat-status","text":"The current Predbat status is reported in predbat.status Idle - This is the default, the load will be covered by solar and/or battery. Excess solar will charge the battery or be exported if the battery is full. This will be described as ECO Mode for Givenergy inverters but other inverters use different terminology. Charge - The battery charges from the grid and the grid also covers any load. Solar power will also be used to charge the battery. Charge Freeze - The current battery level is held and the grid/solar covers any load. Solar power will also be used to charge the battery. Hold Charge - A type of charge where the target % is the same as the current %, effectively the same as a charge freeze (but without being explicitly selected) No Charge - A charge where the target % is lower than the current battery level so there will be no charging unless the usage is unexpectedly high. Discharge - A force discharge slot where the battery is exported to the grid. The battery covers the load. Any solar generated will be exported. Discharge Freeze - A slot where the battery covers the load but charging is disabled, thus any solar generated will be exported. Error - There is a configuration error or other problem, you should check the AppDaemon log in home assistant for more details (Settings, System, Logs, AppDaemon)","title":"Predbat status"}]}